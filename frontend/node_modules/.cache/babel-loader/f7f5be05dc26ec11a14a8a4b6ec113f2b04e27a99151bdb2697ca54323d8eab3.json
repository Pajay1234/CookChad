{"ast":null,"code":"'use strict';\n\nconst Header = require('./header.js');\nconst path = require('path');\nclass Pax {\n  constructor(obj, global) {\n    this.atime = obj.atime || null;\n    this.charset = obj.charset || null;\n    this.comment = obj.comment || null;\n    this.ctime = obj.ctime || null;\n    this.gid = obj.gid || null;\n    this.gname = obj.gname || null;\n    this.linkpath = obj.linkpath || null;\n    this.mtime = obj.mtime || null;\n    this.path = obj.path || null;\n    this.size = obj.size || null;\n    this.uid = obj.uid || null;\n    this.uname = obj.uname || null;\n    this.dev = obj.dev || null;\n    this.ino = obj.ino || null;\n    this.nlink = obj.nlink || null;\n    this.global = global || false;\n  }\n  encode() {\n    const body = this.encodeBody();\n    if (body === '') {\n      return null;\n    }\n    const bodyLen = Buffer.byteLength(body);\n    // round up to 512 bytes\n    // add 512 for header\n    const bufLen = 512 * Math.ceil(1 + bodyLen / 512);\n    const buf = Buffer.allocUnsafe(bufLen);\n\n    // 0-fill the header section, it might not hit every field\n    for (let i = 0; i < 512; i++) {\n      buf[i] = 0;\n    }\n    new Header({\n      // XXX split the path\n      // then the path should be PaxHeader + basename, but less than 99,\n      // prepend with the dirname\n      path: ('PaxHeader/' + path.basename(this.path)).slice(0, 99),\n      mode: this.mode || 0o644,\n      uid: this.uid || null,\n      gid: this.gid || null,\n      size: bodyLen,\n      mtime: this.mtime || null,\n      type: this.global ? 'GlobalExtendedHeader' : 'ExtendedHeader',\n      linkpath: '',\n      uname: this.uname || '',\n      gname: this.gname || '',\n      devmaj: 0,\n      devmin: 0,\n      atime: this.atime || null,\n      ctime: this.ctime || null\n    }).encode(buf);\n    buf.write(body, 512, bodyLen, 'utf8');\n\n    // null pad after the body\n    for (let i = bodyLen + 512; i < buf.length; i++) {\n      buf[i] = 0;\n    }\n    return buf;\n  }\n  encodeBody() {\n    return this.encodeField('path') + this.encodeField('ctime') + this.encodeField('atime') + this.encodeField('dev') + this.encodeField('ino') + this.encodeField('nlink') + this.encodeField('charset') + this.encodeField('comment') + this.encodeField('gid') + this.encodeField('gname') + this.encodeField('linkpath') + this.encodeField('mtime') + this.encodeField('size') + this.encodeField('uid') + this.encodeField('uname');\n  }\n  encodeField(field) {\n    if (this[field] === null || this[field] === undefined) {\n      return '';\n    }\n    const v = this[field] instanceof Date ? this[field].getTime() / 1000 : this[field];\n    const s = ' ' + (field === 'dev' || field === 'ino' || field === 'nlink' ? 'SCHILY.' : '') + field + '=' + v + '\\n';\n    const byteLen = Buffer.byteLength(s);\n    // the digits includes the length of the digits in ascii base-10\n    // so if it's 9 characters, then adding 1 for the 9 makes it 10\n    // which makes it 11 chars.\n    let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1;\n    if (byteLen + digits >= Math.pow(10, digits)) {\n      digits += 1;\n    }\n    const len = digits + byteLen;\n    return len + s;\n  }\n}\nPax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g);\nconst merge = (a, b) => b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a;\nconst parseKV = string => string.replace(/\\n$/, '').split('\\n').reduce(parseKVLine, Object.create(null));\nconst parseKVLine = (set, line) => {\n  const n = parseInt(line, 10);\n\n  // XXX Values with \\n in them will fail this.\n  // Refactor to not be a naive line-by-line parse.\n  if (n !== Buffer.byteLength(line) + 1) {\n    return set;\n  }\n  line = line.slice((n + ' ').length);\n  const kv = line.split('=');\n  const k = kv.shift().replace(/^SCHILY\\.(dev|ino|nlink)/, '$1');\n  if (!k) {\n    return set;\n  }\n  const v = kv.join('=');\n  set[k] = /^([A-Z]+\\.)?([mac]|birth|creation)time$/.test(k) ? new Date(v * 1000) : /^[0-9]+$/.test(v) ? +v : v;\n  return set;\n};\nmodule.exports = Pax;","map":{"version":3,"names":["Header","require","path","Pax","constructor","obj","global","atime","charset","comment","ctime","gid","gname","linkpath","mtime","size","uid","uname","dev","ino","nlink","encode","body","encodeBody","bodyLen","Buffer","byteLength","bufLen","Math","ceil","buf","allocUnsafe","i","basename","slice","mode","type","devmaj","devmin","write","length","encodeField","field","undefined","v","Date","getTime","s","byteLen","digits","floor","log","pow","len","parse","string","ex","g","merge","parseKV","a","b","Object","keys","reduce","k","replace","split","parseKVLine","create","set","line","n","parseInt","kv","shift","join","test","module","exports"],"sources":["C:/Users/Ryan/Documents/school/fall 2023/cmpe 133/project/CookChad/frontend/node_modules/tar/lib/pax.js"],"sourcesContent":["'use strict'\nconst Header = require('./header.js')\nconst path = require('path')\n\nclass Pax {\n  constructor (obj, global) {\n    this.atime = obj.atime || null\n    this.charset = obj.charset || null\n    this.comment = obj.comment || null\n    this.ctime = obj.ctime || null\n    this.gid = obj.gid || null\n    this.gname = obj.gname || null\n    this.linkpath = obj.linkpath || null\n    this.mtime = obj.mtime || null\n    this.path = obj.path || null\n    this.size = obj.size || null\n    this.uid = obj.uid || null\n    this.uname = obj.uname || null\n    this.dev = obj.dev || null\n    this.ino = obj.ino || null\n    this.nlink = obj.nlink || null\n    this.global = global || false\n  }\n\n  encode () {\n    const body = this.encodeBody()\n    if (body === '') {\n      return null\n    }\n\n    const bodyLen = Buffer.byteLength(body)\n    // round up to 512 bytes\n    // add 512 for header\n    const bufLen = 512 * Math.ceil(1 + bodyLen / 512)\n    const buf = Buffer.allocUnsafe(bufLen)\n\n    // 0-fill the header section, it might not hit every field\n    for (let i = 0; i < 512; i++) {\n      buf[i] = 0\n    }\n\n    new Header({\n      // XXX split the path\n      // then the path should be PaxHeader + basename, but less than 99,\n      // prepend with the dirname\n      path: ('PaxHeader/' + path.basename(this.path)).slice(0, 99),\n      mode: this.mode || 0o644,\n      uid: this.uid || null,\n      gid: this.gid || null,\n      size: bodyLen,\n      mtime: this.mtime || null,\n      type: this.global ? 'GlobalExtendedHeader' : 'ExtendedHeader',\n      linkpath: '',\n      uname: this.uname || '',\n      gname: this.gname || '',\n      devmaj: 0,\n      devmin: 0,\n      atime: this.atime || null,\n      ctime: this.ctime || null,\n    }).encode(buf)\n\n    buf.write(body, 512, bodyLen, 'utf8')\n\n    // null pad after the body\n    for (let i = bodyLen + 512; i < buf.length; i++) {\n      buf[i] = 0\n    }\n\n    return buf\n  }\n\n  encodeBody () {\n    return (\n      this.encodeField('path') +\n      this.encodeField('ctime') +\n      this.encodeField('atime') +\n      this.encodeField('dev') +\n      this.encodeField('ino') +\n      this.encodeField('nlink') +\n      this.encodeField('charset') +\n      this.encodeField('comment') +\n      this.encodeField('gid') +\n      this.encodeField('gname') +\n      this.encodeField('linkpath') +\n      this.encodeField('mtime') +\n      this.encodeField('size') +\n      this.encodeField('uid') +\n      this.encodeField('uname')\n    )\n  }\n\n  encodeField (field) {\n    if (this[field] === null || this[field] === undefined) {\n      return ''\n    }\n    const v = this[field] instanceof Date ? this[field].getTime() / 1000\n      : this[field]\n    const s = ' ' +\n      (field === 'dev' || field === 'ino' || field === 'nlink'\n        ? 'SCHILY.' : '') +\n      field + '=' + v + '\\n'\n    const byteLen = Buffer.byteLength(s)\n    // the digits includes the length of the digits in ascii base-10\n    // so if it's 9 characters, then adding 1 for the 9 makes it 10\n    // which makes it 11 chars.\n    let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1\n    if (byteLen + digits >= Math.pow(10, digits)) {\n      digits += 1\n    }\n    const len = digits + byteLen\n    return len + s\n  }\n}\n\nPax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g)\n\nconst merge = (a, b) =>\n  b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a\n\nconst parseKV = string =>\n  string\n    .replace(/\\n$/, '')\n    .split('\\n')\n    .reduce(parseKVLine, Object.create(null))\n\nconst parseKVLine = (set, line) => {\n  const n = parseInt(line, 10)\n\n  // XXX Values with \\n in them will fail this.\n  // Refactor to not be a naive line-by-line parse.\n  if (n !== Buffer.byteLength(line) + 1) {\n    return set\n  }\n\n  line = line.slice((n + ' ').length)\n  const kv = line.split('=')\n  const k = kv.shift().replace(/^SCHILY\\.(dev|ino|nlink)/, '$1')\n  if (!k) {\n    return set\n  }\n\n  const v = kv.join('=')\n  set[k] = /^([A-Z]+\\.)?([mac]|birth|creation)time$/.test(k)\n    ? new Date(v * 1000)\n    : /^[0-9]+$/.test(v) ? +v\n    : v\n  return set\n}\n\nmodule.exports = Pax\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}