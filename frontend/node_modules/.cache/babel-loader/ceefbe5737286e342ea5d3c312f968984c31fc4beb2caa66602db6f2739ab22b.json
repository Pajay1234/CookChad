{"ast":null,"code":"'use strict';\n\n// tar -u\nconst hlo = require('./high-level-opt.js');\nconst r = require('./replace.js');\n// just call tar.r with the filter and mtimeCache\n\nmodule.exports = (opt_, files, cb) => {\n  const opt = hlo(opt_);\n  if (!opt.file) {\n    throw new TypeError('file is required');\n  }\n  if (opt.gzip || opt.brotli || opt.file.endsWith('.br') || opt.file.endsWith('.tbr')) {\n    throw new TypeError('cannot append to compressed archives');\n  }\n  if (!files || !Array.isArray(files) || !files.length) {\n    throw new TypeError('no files or directories specified');\n  }\n  files = Array.from(files);\n  mtimeFilter(opt);\n  return r(opt, files, cb);\n};\nconst mtimeFilter = opt => {\n  const filter = opt.filter;\n  if (!opt.mtimeCache) {\n    opt.mtimeCache = new Map();\n  }\n  opt.filter = filter ? (path, stat) => filter(path, stat) && !(opt.mtimeCache.get(path) > stat.mtime) : (path, stat) => !(opt.mtimeCache.get(path) > stat.mtime);\n};","map":{"version":3,"names":["hlo","require","r","module","exports","opt_","files","cb","opt","file","TypeError","gzip","brotli","endsWith","Array","isArray","length","from","mtimeFilter","filter","mtimeCache","Map","path","stat","get","mtime"],"sources":["C:/Users/Ryan/Documents/school/fall 2023/cmpe 133/project/CookChad/frontend/node_modules/tar/lib/update.js"],"sourcesContent":["'use strict'\n\n// tar -u\n\nconst hlo = require('./high-level-opt.js')\nconst r = require('./replace.js')\n// just call tar.r with the filter and mtimeCache\n\nmodule.exports = (opt_, files, cb) => {\n  const opt = hlo(opt_)\n\n  if (!opt.file) {\n    throw new TypeError('file is required')\n  }\n\n  if (opt.gzip || opt.brotli || opt.file.endsWith('.br') || opt.file.endsWith('.tbr')) {\n    throw new TypeError('cannot append to compressed archives')\n  }\n\n  if (!files || !Array.isArray(files) || !files.length) {\n    throw new TypeError('no files or directories specified')\n  }\n\n  files = Array.from(files)\n\n  mtimeFilter(opt)\n  return r(opt, files, cb)\n}\n\nconst mtimeFilter = opt => {\n  const filter = opt.filter\n\n  if (!opt.mtimeCache) {\n    opt.mtimeCache = new Map()\n  }\n\n  opt.filter = filter ? (path, stat) =>\n    filter(path, stat) && !(opt.mtimeCache.get(path) > stat.mtime)\n    : (path, stat) => !(opt.mtimeCache.get(path) > stat.mtime)\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC1C,MAAMC,CAAC,GAAGD,OAAO,CAAC,cAAc,CAAC;AACjC;;AAEAE,MAAM,CAACC,OAAO,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEC,EAAE,KAAK;EACpC,MAAMC,GAAG,GAAGR,GAAG,CAACK,IAAI,CAAC;EAErB,IAAI,CAACG,GAAG,CAACC,IAAI,EAAE;IACb,MAAM,IAAIC,SAAS,CAAC,kBAAkB,CAAC;EACzC;EAEA,IAAIF,GAAG,CAACG,IAAI,IAAIH,GAAG,CAACI,MAAM,IAAIJ,GAAG,CAACC,IAAI,CAACI,QAAQ,CAAC,KAAK,CAAC,IAAIL,GAAG,CAACC,IAAI,CAACI,QAAQ,CAAC,MAAM,CAAC,EAAE;IACnF,MAAM,IAAIH,SAAS,CAAC,sCAAsC,CAAC;EAC7D;EAEA,IAAI,CAACJ,KAAK,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACT,KAAK,CAAC,IAAI,CAACA,KAAK,CAACU,MAAM,EAAE;IACpD,MAAM,IAAIN,SAAS,CAAC,mCAAmC,CAAC;EAC1D;EAEAJ,KAAK,GAAGQ,KAAK,CAACG,IAAI,CAACX,KAAK,CAAC;EAEzBY,WAAW,CAACV,GAAG,CAAC;EAChB,OAAON,CAAC,CAACM,GAAG,EAAEF,KAAK,EAAEC,EAAE,CAAC;AAC1B,CAAC;AAED,MAAMW,WAAW,GAAGV,GAAG,IAAI;EACzB,MAAMW,MAAM,GAAGX,GAAG,CAACW,MAAM;EAEzB,IAAI,CAACX,GAAG,CAACY,UAAU,EAAE;IACnBZ,GAAG,CAACY,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC5B;EAEAb,GAAG,CAACW,MAAM,GAAGA,MAAM,GAAG,CAACG,IAAI,EAAEC,IAAI,KAC/BJ,MAAM,CAACG,IAAI,EAAEC,IAAI,CAAC,IAAI,EAAEf,GAAG,CAACY,UAAU,CAACI,GAAG,CAACF,IAAI,CAAC,GAAGC,IAAI,CAACE,KAAK,CAAC,GAC5D,CAACH,IAAI,EAAEC,IAAI,KAAK,EAAEf,GAAG,CAACY,UAAU,CAACI,GAAG,CAACF,IAAI,CAAC,GAAGC,IAAI,CAACE,KAAK,CAAC;AAC9D,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}