{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar pathModule = require('path');\nvar isWindows = process.platform === 'win32';\nvar fs = require('fs');\n\n// JavaScript implementation of realpath, ported from node pre-v6\n\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\nfunction rethrow() {\n  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\n  // is fairly slow to generate.\n  var callback;\n  if (DEBUG) {\n    var backtrace = new Error();\n    callback = debugCallback;\n  } else callback = missingCallback;\n  return callback;\n  function debugCallback(err) {\n    if (err) {\n      backtrace.message = err.message;\n      err = backtrace;\n      missingCallback(err);\n    }\n  }\n  function missingCallback(err) {\n    if (err) {\n      if (process.throwDeprecation) throw err; // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n      else if (!process.noDeprecation) {\n        var msg = 'fs: missing callback ' + (err.stack || err.message);\n        if (process.traceDeprecation) console.trace(msg);else console.error(msg);\n      }\n    }\n  }\n}\nfunction maybeCallback(cb) {\n  return typeof cb === 'function' ? cb : rethrow();\n}\nvar normalize = pathModule.normalize;\n\n// Regexp that finds the next partion of a (partial) path\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\nif (isWindows) {\n  var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\n} else {\n  var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\n}\n\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\nif (isWindows) {\n  var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\n} else {\n  var splitRootRe = /^[\\/]*/;\n}\nexports.realpathSync = function realpathSync(p, cache) {\n  // make p is absolute\n  p = pathModule.resolve(p);\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return cache[p];\n  }\n  var original = p,\n    seenLinks = {},\n    knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n  start();\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstatSync(base);\n      knownHard[base] = true;\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  // NB: p.length changes.\n  while (pos < p.length) {\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || cache && cache[base] === base) {\n      continue;\n    }\n    var resolvedLink;\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // some known symbolic link.  no need to stat again.\n      resolvedLink = cache[base];\n    } else {\n      var stat = fs.lstatSync(base);\n      if (!stat.isSymbolicLink()) {\n        knownHard[base] = true;\n        if (cache) cache[base] = base;\n        continue;\n      }\n\n      // read the link if it wasn't read before\n      // dev/ino always return 0 on windows, so skip the check.\n      var linkTarget = null;\n      if (!isWindows) {\n        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n        if (seenLinks.hasOwnProperty(id)) {\n          linkTarget = seenLinks[id];\n        }\n      }\n      if (linkTarget === null) {\n        fs.statSync(base);\n        linkTarget = fs.readlinkSync(base);\n      }\n      resolvedLink = pathModule.resolve(previous, linkTarget);\n      // track this, if given a cache.\n      if (cache) cache[base] = resolvedLink;\n      if (!isWindows) seenLinks[id] = linkTarget;\n    }\n\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n  if (cache) cache[original] = p;\n  return p;\n};\nexports.realpath = function realpath(p, cache, cb) {\n  if (typeof cb !== 'function') {\n    cb = maybeCallback(cache);\n    cache = null;\n  }\n\n  // make p is absolute\n  p = pathModule.resolve(p);\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return process.nextTick(cb.bind(null, null, cache[p]));\n  }\n  var original = p,\n    seenLinks = {},\n    knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n  start();\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstat(base, function (err) {\n        if (err) return cb(err);\n        knownHard[base] = true;\n        LOOP();\n      });\n    } else {\n      process.nextTick(LOOP);\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  function LOOP() {\n    // stop if scanned past end of path\n    if (pos >= p.length) {\n      if (cache) cache[original] = p;\n      return cb(null, p);\n    }\n\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || cache && cache[base] === base) {\n      return process.nextTick(LOOP);\n    }\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // known symbolic link.  no need to stat again.\n      return gotResolvedLink(cache[base]);\n    }\n    return fs.lstat(base, gotStat);\n  }\n  function gotStat(err, stat) {\n    if (err) return cb(err);\n\n    // if not a symlink, skip to the next path part\n    if (!stat.isSymbolicLink()) {\n      knownHard[base] = true;\n      if (cache) cache[base] = base;\n      return process.nextTick(LOOP);\n    }\n\n    // stat & read the link if not read before\n    // call gotTarget as soon as the link target is known\n    // dev/ino always return 0 on windows, so skip the check.\n    if (!isWindows) {\n      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n      if (seenLinks.hasOwnProperty(id)) {\n        return gotTarget(null, seenLinks[id], base);\n      }\n    }\n    fs.stat(base, function (err) {\n      if (err) return cb(err);\n      fs.readlink(base, function (err, target) {\n        if (!isWindows) seenLinks[id] = target;\n        gotTarget(err, target);\n      });\n    });\n  }\n  function gotTarget(err, target, base) {\n    if (err) return cb(err);\n    var resolvedLink = pathModule.resolve(previous, target);\n    if (cache) cache[base] = resolvedLink;\n    gotResolvedLink(resolvedLink);\n  }\n  function gotResolvedLink(resolvedLink) {\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n};","map":{"version":3,"names":["pathModule","require","isWindows","process","platform","fs","DEBUG","env","NODE_DEBUG","test","rethrow","callback","backtrace","Error","debugCallback","missingCallback","err","message","throwDeprecation","noDeprecation","msg","stack","traceDeprecation","console","trace","error","maybeCallback","cb","normalize","nextPartRe","splitRootRe","exports","realpathSync","p","cache","resolve","Object","prototype","hasOwnProperty","call","original","seenLinks","knownHard","pos","current","base","previous","start","m","exec","length","lstatSync","lastIndex","result","resolvedLink","stat","isSymbolicLink","linkTarget","id","dev","toString","ino","statSync","readlinkSync","slice","realpath","nextTick","bind","lstat","LOOP","gotResolvedLink","gotStat","gotTarget","readlink","target"],"sources":["C:/Users/Ryan/Documents/school/fall 2023/cmpe 133/project/CookChad/frontend/node_modules/fs.realpath/old.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nvar pathModule = require('path');\r\nvar isWindows = process.platform === 'win32';\r\nvar fs = require('fs');\r\n\r\n// JavaScript implementation of realpath, ported from node pre-v6\r\n\r\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\r\n\r\nfunction rethrow() {\r\n  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\r\n  // is fairly slow to generate.\r\n  var callback;\r\n  if (DEBUG) {\r\n    var backtrace = new Error;\r\n    callback = debugCallback;\r\n  } else\r\n    callback = missingCallback;\r\n\r\n  return callback;\r\n\r\n  function debugCallback(err) {\r\n    if (err) {\r\n      backtrace.message = err.message;\r\n      err = backtrace;\r\n      missingCallback(err);\r\n    }\r\n  }\r\n\r\n  function missingCallback(err) {\r\n    if (err) {\r\n      if (process.throwDeprecation)\r\n        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs\r\n      else if (!process.noDeprecation) {\r\n        var msg = 'fs: missing callback ' + (err.stack || err.message);\r\n        if (process.traceDeprecation)\r\n          console.trace(msg);\r\n        else\r\n          console.error(msg);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction maybeCallback(cb) {\r\n  return typeof cb === 'function' ? cb : rethrow();\r\n}\r\n\r\nvar normalize = pathModule.normalize;\r\n\r\n// Regexp that finds the next partion of a (partial) path\r\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\r\nif (isWindows) {\r\n  var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\r\n} else {\r\n  var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\r\n}\r\n\r\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\r\nif (isWindows) {\r\n  var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\r\n} else {\r\n  var splitRootRe = /^[\\/]*/;\r\n}\r\n\r\nexports.realpathSync = function realpathSync(p, cache) {\r\n  // make p is absolute\r\n  p = pathModule.resolve(p);\r\n\r\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\r\n    return cache[p];\r\n  }\r\n\r\n  var original = p,\r\n      seenLinks = {},\r\n      knownHard = {};\r\n\r\n  // current character position in p\r\n  var pos;\r\n  // the partial path so far, including a trailing slash if any\r\n  var current;\r\n  // the partial path without a trailing slash (except when pointing at a root)\r\n  var base;\r\n  // the partial path scanned in the previous round, with slash\r\n  var previous;\r\n\r\n  start();\r\n\r\n  function start() {\r\n    // Skip over roots\r\n    var m = splitRootRe.exec(p);\r\n    pos = m[0].length;\r\n    current = m[0];\r\n    base = m[0];\r\n    previous = '';\r\n\r\n    // On windows, check that the root exists. On unix there is no need.\r\n    if (isWindows && !knownHard[base]) {\r\n      fs.lstatSync(base);\r\n      knownHard[base] = true;\r\n    }\r\n  }\r\n\r\n  // walk down the path, swapping out linked pathparts for their real\r\n  // values\r\n  // NB: p.length changes.\r\n  while (pos < p.length) {\r\n    // find the next part\r\n    nextPartRe.lastIndex = pos;\r\n    var result = nextPartRe.exec(p);\r\n    previous = current;\r\n    current += result[0];\r\n    base = previous + result[1];\r\n    pos = nextPartRe.lastIndex;\r\n\r\n    // continue if not a symlink\r\n    if (knownHard[base] || (cache && cache[base] === base)) {\r\n      continue;\r\n    }\r\n\r\n    var resolvedLink;\r\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\r\n      // some known symbolic link.  no need to stat again.\r\n      resolvedLink = cache[base];\r\n    } else {\r\n      var stat = fs.lstatSync(base);\r\n      if (!stat.isSymbolicLink()) {\r\n        knownHard[base] = true;\r\n        if (cache) cache[base] = base;\r\n        continue;\r\n      }\r\n\r\n      // read the link if it wasn't read before\r\n      // dev/ino always return 0 on windows, so skip the check.\r\n      var linkTarget = null;\r\n      if (!isWindows) {\r\n        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\r\n        if (seenLinks.hasOwnProperty(id)) {\r\n          linkTarget = seenLinks[id];\r\n        }\r\n      }\r\n      if (linkTarget === null) {\r\n        fs.statSync(base);\r\n        linkTarget = fs.readlinkSync(base);\r\n      }\r\n      resolvedLink = pathModule.resolve(previous, linkTarget);\r\n      // track this, if given a cache.\r\n      if (cache) cache[base] = resolvedLink;\r\n      if (!isWindows) seenLinks[id] = linkTarget;\r\n    }\r\n\r\n    // resolve the link, then start over\r\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\r\n    start();\r\n  }\r\n\r\n  if (cache) cache[original] = p;\r\n\r\n  return p;\r\n};\r\n\r\n\r\nexports.realpath = function realpath(p, cache, cb) {\r\n  if (typeof cb !== 'function') {\r\n    cb = maybeCallback(cache);\r\n    cache = null;\r\n  }\r\n\r\n  // make p is absolute\r\n  p = pathModule.resolve(p);\r\n\r\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\r\n    return process.nextTick(cb.bind(null, null, cache[p]));\r\n  }\r\n\r\n  var original = p,\r\n      seenLinks = {},\r\n      knownHard = {};\r\n\r\n  // current character position in p\r\n  var pos;\r\n  // the partial path so far, including a trailing slash if any\r\n  var current;\r\n  // the partial path without a trailing slash (except when pointing at a root)\r\n  var base;\r\n  // the partial path scanned in the previous round, with slash\r\n  var previous;\r\n\r\n  start();\r\n\r\n  function start() {\r\n    // Skip over roots\r\n    var m = splitRootRe.exec(p);\r\n    pos = m[0].length;\r\n    current = m[0];\r\n    base = m[0];\r\n    previous = '';\r\n\r\n    // On windows, check that the root exists. On unix there is no need.\r\n    if (isWindows && !knownHard[base]) {\r\n      fs.lstat(base, function(err) {\r\n        if (err) return cb(err);\r\n        knownHard[base] = true;\r\n        LOOP();\r\n      });\r\n    } else {\r\n      process.nextTick(LOOP);\r\n    }\r\n  }\r\n\r\n  // walk down the path, swapping out linked pathparts for their real\r\n  // values\r\n  function LOOP() {\r\n    // stop if scanned past end of path\r\n    if (pos >= p.length) {\r\n      if (cache) cache[original] = p;\r\n      return cb(null, p);\r\n    }\r\n\r\n    // find the next part\r\n    nextPartRe.lastIndex = pos;\r\n    var result = nextPartRe.exec(p);\r\n    previous = current;\r\n    current += result[0];\r\n    base = previous + result[1];\r\n    pos = nextPartRe.lastIndex;\r\n\r\n    // continue if not a symlink\r\n    if (knownHard[base] || (cache && cache[base] === base)) {\r\n      return process.nextTick(LOOP);\r\n    }\r\n\r\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\r\n      // known symbolic link.  no need to stat again.\r\n      return gotResolvedLink(cache[base]);\r\n    }\r\n\r\n    return fs.lstat(base, gotStat);\r\n  }\r\n\r\n  function gotStat(err, stat) {\r\n    if (err) return cb(err);\r\n\r\n    // if not a symlink, skip to the next path part\r\n    if (!stat.isSymbolicLink()) {\r\n      knownHard[base] = true;\r\n      if (cache) cache[base] = base;\r\n      return process.nextTick(LOOP);\r\n    }\r\n\r\n    // stat & read the link if not read before\r\n    // call gotTarget as soon as the link target is known\r\n    // dev/ino always return 0 on windows, so skip the check.\r\n    if (!isWindows) {\r\n      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\r\n      if (seenLinks.hasOwnProperty(id)) {\r\n        return gotTarget(null, seenLinks[id], base);\r\n      }\r\n    }\r\n    fs.stat(base, function(err) {\r\n      if (err) return cb(err);\r\n\r\n      fs.readlink(base, function(err, target) {\r\n        if (!isWindows) seenLinks[id] = target;\r\n        gotTarget(err, target);\r\n      });\r\n    });\r\n  }\r\n\r\n  function gotTarget(err, target, base) {\r\n    if (err) return cb(err);\r\n\r\n    var resolvedLink = pathModule.resolve(previous, target);\r\n    if (cache) cache[base] = resolvedLink;\r\n    gotResolvedLink(resolvedLink);\r\n  }\r\n\r\n  function gotResolvedLink(resolvedLink) {\r\n    // resolve the link, then start over\r\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\r\n    start();\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,MAAM,CAAC;AAChC,IAAIC,SAAS,GAAGC,OAAO,CAACC,QAAQ,KAAK,OAAO;AAC5C,IAAIC,EAAE,GAAGJ,OAAO,CAAC,IAAI,CAAC;;AAEtB;;AAEA,IAAIK,KAAK,GAAGH,OAAO,CAACI,GAAG,CAACC,UAAU,IAAI,IAAI,CAACC,IAAI,CAACN,OAAO,CAACI,GAAG,CAACC,UAAU,CAAC;AAEvE,SAASE,OAAOA,CAAA,EAAG;EACjB;EACA;EACA,IAAIC,QAAQ;EACZ,IAAIL,KAAK,EAAE;IACT,IAAIM,SAAS,GAAG,IAAIC,KAAK,CAAD,CAAC;IACzBF,QAAQ,GAAGG,aAAa;EAC1B,CAAC,MACCH,QAAQ,GAAGI,eAAe;EAE5B,OAAOJ,QAAQ;EAEf,SAASG,aAAaA,CAACE,GAAG,EAAE;IAC1B,IAAIA,GAAG,EAAE;MACPJ,SAAS,CAACK,OAAO,GAAGD,GAAG,CAACC,OAAO;MAC/BD,GAAG,GAAGJ,SAAS;MACfG,eAAe,CAACC,GAAG,CAAC;IACtB;EACF;EAEA,SAASD,eAAeA,CAACC,GAAG,EAAE;IAC5B,IAAIA,GAAG,EAAE;MACP,IAAIb,OAAO,CAACe,gBAAgB,EAC1B,MAAMF,GAAG,CAAC,CAAE;MAAA,KACT,IAAI,CAACb,OAAO,CAACgB,aAAa,EAAE;QAC/B,IAAIC,GAAG,GAAG,uBAAuB,IAAIJ,GAAG,CAACK,KAAK,IAAIL,GAAG,CAACC,OAAO,CAAC;QAC9D,IAAId,OAAO,CAACmB,gBAAgB,EAC1BC,OAAO,CAACC,KAAK,CAACJ,GAAG,CAAC,CAAC,KAEnBG,OAAO,CAACE,KAAK,CAACL,GAAG,CAAC;MACtB;IACF;EACF;AACF;AAEA,SAASM,aAAaA,CAACC,EAAE,EAAE;EACzB,OAAO,OAAOA,EAAE,KAAK,UAAU,GAAGA,EAAE,GAAGjB,OAAO,CAAC,CAAC;AAClD;AAEA,IAAIkB,SAAS,GAAG5B,UAAU,CAAC4B,SAAS;;AAEpC;AACA;AACA,IAAI1B,SAAS,EAAE;EACb,IAAI2B,UAAU,GAAG,qBAAqB;AACxC,CAAC,MAAM;EACL,IAAIA,UAAU,GAAG,mBAAmB;AACtC;;AAEA;AACA,IAAI3B,SAAS,EAAE;EACb,IAAI4B,WAAW,GAAG,wDAAwD;AAC5E,CAAC,MAAM;EACL,IAAIA,WAAW,GAAG,QAAQ;AAC5B;AAEAC,OAAO,CAACC,YAAY,GAAG,SAASA,YAAYA,CAACC,CAAC,EAAEC,KAAK,EAAE;EACrD;EACAD,CAAC,GAAGjC,UAAU,CAACmC,OAAO,CAACF,CAAC,CAAC;EAEzB,IAAIC,KAAK,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,KAAK,EAAED,CAAC,CAAC,EAAE;IAC3D,OAAOC,KAAK,CAACD,CAAC,CAAC;EACjB;EAEA,IAAIO,QAAQ,GAAGP,CAAC;IACZQ,SAAS,GAAG,CAAC,CAAC;IACdC,SAAS,GAAG,CAAC,CAAC;;EAElB;EACA,IAAIC,GAAG;EACP;EACA,IAAIC,OAAO;EACX;EACA,IAAIC,IAAI;EACR;EACA,IAAIC,QAAQ;EAEZC,KAAK,CAAC,CAAC;EAEP,SAASA,KAAKA,CAAA,EAAG;IACf;IACA,IAAIC,CAAC,GAAGlB,WAAW,CAACmB,IAAI,CAAChB,CAAC,CAAC;IAC3BU,GAAG,GAAGK,CAAC,CAAC,CAAC,CAAC,CAACE,MAAM;IACjBN,OAAO,GAAGI,CAAC,CAAC,CAAC,CAAC;IACdH,IAAI,GAAGG,CAAC,CAAC,CAAC,CAAC;IACXF,QAAQ,GAAG,EAAE;;IAEb;IACA,IAAI5C,SAAS,IAAI,CAACwC,SAAS,CAACG,IAAI,CAAC,EAAE;MACjCxC,EAAE,CAAC8C,SAAS,CAACN,IAAI,CAAC;MAClBH,SAAS,CAACG,IAAI,CAAC,GAAG,IAAI;IACxB;EACF;;EAEA;EACA;EACA;EACA,OAAOF,GAAG,GAAGV,CAAC,CAACiB,MAAM,EAAE;IACrB;IACArB,UAAU,CAACuB,SAAS,GAAGT,GAAG;IAC1B,IAAIU,MAAM,GAAGxB,UAAU,CAACoB,IAAI,CAAChB,CAAC,CAAC;IAC/Ba,QAAQ,GAAGF,OAAO;IAClBA,OAAO,IAAIS,MAAM,CAAC,CAAC,CAAC;IACpBR,IAAI,GAAGC,QAAQ,GAAGO,MAAM,CAAC,CAAC,CAAC;IAC3BV,GAAG,GAAGd,UAAU,CAACuB,SAAS;;IAE1B;IACA,IAAIV,SAAS,CAACG,IAAI,CAAC,IAAKX,KAAK,IAAIA,KAAK,CAACW,IAAI,CAAC,KAAKA,IAAK,EAAE;MACtD;IACF;IAEA,IAAIS,YAAY;IAChB,IAAIpB,KAAK,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,KAAK,EAAEW,IAAI,CAAC,EAAE;MAC9D;MACAS,YAAY,GAAGpB,KAAK,CAACW,IAAI,CAAC;IAC5B,CAAC,MAAM;MACL,IAAIU,IAAI,GAAGlD,EAAE,CAAC8C,SAAS,CAACN,IAAI,CAAC;MAC7B,IAAI,CAACU,IAAI,CAACC,cAAc,CAAC,CAAC,EAAE;QAC1Bd,SAAS,CAACG,IAAI,CAAC,GAAG,IAAI;QACtB,IAAIX,KAAK,EAAEA,KAAK,CAACW,IAAI,CAAC,GAAGA,IAAI;QAC7B;MACF;;MAEA;MACA;MACA,IAAIY,UAAU,GAAG,IAAI;MACrB,IAAI,CAACvD,SAAS,EAAE;QACd,IAAIwD,EAAE,GAAGH,IAAI,CAACI,GAAG,CAACC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAGL,IAAI,CAACM,GAAG,CAACD,QAAQ,CAAC,EAAE,CAAC;QAC5D,IAAInB,SAAS,CAACH,cAAc,CAACoB,EAAE,CAAC,EAAE;UAChCD,UAAU,GAAGhB,SAAS,CAACiB,EAAE,CAAC;QAC5B;MACF;MACA,IAAID,UAAU,KAAK,IAAI,EAAE;QACvBpD,EAAE,CAACyD,QAAQ,CAACjB,IAAI,CAAC;QACjBY,UAAU,GAAGpD,EAAE,CAAC0D,YAAY,CAAClB,IAAI,CAAC;MACpC;MACAS,YAAY,GAAGtD,UAAU,CAACmC,OAAO,CAACW,QAAQ,EAAEW,UAAU,CAAC;MACvD;MACA,IAAIvB,KAAK,EAAEA,KAAK,CAACW,IAAI,CAAC,GAAGS,YAAY;MACrC,IAAI,CAACpD,SAAS,EAAEuC,SAAS,CAACiB,EAAE,CAAC,GAAGD,UAAU;IAC5C;;IAEA;IACAxB,CAAC,GAAGjC,UAAU,CAACmC,OAAO,CAACmB,YAAY,EAAErB,CAAC,CAAC+B,KAAK,CAACrB,GAAG,CAAC,CAAC;IAClDI,KAAK,CAAC,CAAC;EACT;EAEA,IAAIb,KAAK,EAAEA,KAAK,CAACM,QAAQ,CAAC,GAAGP,CAAC;EAE9B,OAAOA,CAAC;AACV,CAAC;AAGDF,OAAO,CAACkC,QAAQ,GAAG,SAASA,QAAQA,CAAChC,CAAC,EAAEC,KAAK,EAAEP,EAAE,EAAE;EACjD,IAAI,OAAOA,EAAE,KAAK,UAAU,EAAE;IAC5BA,EAAE,GAAGD,aAAa,CAACQ,KAAK,CAAC;IACzBA,KAAK,GAAG,IAAI;EACd;;EAEA;EACAD,CAAC,GAAGjC,UAAU,CAACmC,OAAO,CAACF,CAAC,CAAC;EAEzB,IAAIC,KAAK,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,KAAK,EAAED,CAAC,CAAC,EAAE;IAC3D,OAAO9B,OAAO,CAAC+D,QAAQ,CAACvC,EAAE,CAACwC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAEjC,KAAK,CAACD,CAAC,CAAC,CAAC,CAAC;EACxD;EAEA,IAAIO,QAAQ,GAAGP,CAAC;IACZQ,SAAS,GAAG,CAAC,CAAC;IACdC,SAAS,GAAG,CAAC,CAAC;;EAElB;EACA,IAAIC,GAAG;EACP;EACA,IAAIC,OAAO;EACX;EACA,IAAIC,IAAI;EACR;EACA,IAAIC,QAAQ;EAEZC,KAAK,CAAC,CAAC;EAEP,SAASA,KAAKA,CAAA,EAAG;IACf;IACA,IAAIC,CAAC,GAAGlB,WAAW,CAACmB,IAAI,CAAChB,CAAC,CAAC;IAC3BU,GAAG,GAAGK,CAAC,CAAC,CAAC,CAAC,CAACE,MAAM;IACjBN,OAAO,GAAGI,CAAC,CAAC,CAAC,CAAC;IACdH,IAAI,GAAGG,CAAC,CAAC,CAAC,CAAC;IACXF,QAAQ,GAAG,EAAE;;IAEb;IACA,IAAI5C,SAAS,IAAI,CAACwC,SAAS,CAACG,IAAI,CAAC,EAAE;MACjCxC,EAAE,CAAC+D,KAAK,CAACvB,IAAI,EAAE,UAAS7B,GAAG,EAAE;QAC3B,IAAIA,GAAG,EAAE,OAAOW,EAAE,CAACX,GAAG,CAAC;QACvB0B,SAAS,CAACG,IAAI,CAAC,GAAG,IAAI;QACtBwB,IAAI,CAAC,CAAC;MACR,CAAC,CAAC;IACJ,CAAC,MAAM;MACLlE,OAAO,CAAC+D,QAAQ,CAACG,IAAI,CAAC;IACxB;EACF;;EAEA;EACA;EACA,SAASA,IAAIA,CAAA,EAAG;IACd;IACA,IAAI1B,GAAG,IAAIV,CAAC,CAACiB,MAAM,EAAE;MACnB,IAAIhB,KAAK,EAAEA,KAAK,CAACM,QAAQ,CAAC,GAAGP,CAAC;MAC9B,OAAON,EAAE,CAAC,IAAI,EAAEM,CAAC,CAAC;IACpB;;IAEA;IACAJ,UAAU,CAACuB,SAAS,GAAGT,GAAG;IAC1B,IAAIU,MAAM,GAAGxB,UAAU,CAACoB,IAAI,CAAChB,CAAC,CAAC;IAC/Ba,QAAQ,GAAGF,OAAO;IAClBA,OAAO,IAAIS,MAAM,CAAC,CAAC,CAAC;IACpBR,IAAI,GAAGC,QAAQ,GAAGO,MAAM,CAAC,CAAC,CAAC;IAC3BV,GAAG,GAAGd,UAAU,CAACuB,SAAS;;IAE1B;IACA,IAAIV,SAAS,CAACG,IAAI,CAAC,IAAKX,KAAK,IAAIA,KAAK,CAACW,IAAI,CAAC,KAAKA,IAAK,EAAE;MACtD,OAAO1C,OAAO,CAAC+D,QAAQ,CAACG,IAAI,CAAC;IAC/B;IAEA,IAAInC,KAAK,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,KAAK,EAAEW,IAAI,CAAC,EAAE;MAC9D;MACA,OAAOyB,eAAe,CAACpC,KAAK,CAACW,IAAI,CAAC,CAAC;IACrC;IAEA,OAAOxC,EAAE,CAAC+D,KAAK,CAACvB,IAAI,EAAE0B,OAAO,CAAC;EAChC;EAEA,SAASA,OAAOA,CAACvD,GAAG,EAAEuC,IAAI,EAAE;IAC1B,IAAIvC,GAAG,EAAE,OAAOW,EAAE,CAACX,GAAG,CAAC;;IAEvB;IACA,IAAI,CAACuC,IAAI,CAACC,cAAc,CAAC,CAAC,EAAE;MAC1Bd,SAAS,CAACG,IAAI,CAAC,GAAG,IAAI;MACtB,IAAIX,KAAK,EAAEA,KAAK,CAACW,IAAI,CAAC,GAAGA,IAAI;MAC7B,OAAO1C,OAAO,CAAC+D,QAAQ,CAACG,IAAI,CAAC;IAC/B;;IAEA;IACA;IACA;IACA,IAAI,CAACnE,SAAS,EAAE;MACd,IAAIwD,EAAE,GAAGH,IAAI,CAACI,GAAG,CAACC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAGL,IAAI,CAACM,GAAG,CAACD,QAAQ,CAAC,EAAE,CAAC;MAC5D,IAAInB,SAAS,CAACH,cAAc,CAACoB,EAAE,CAAC,EAAE;QAChC,OAAOc,SAAS,CAAC,IAAI,EAAE/B,SAAS,CAACiB,EAAE,CAAC,EAAEb,IAAI,CAAC;MAC7C;IACF;IACAxC,EAAE,CAACkD,IAAI,CAACV,IAAI,EAAE,UAAS7B,GAAG,EAAE;MAC1B,IAAIA,GAAG,EAAE,OAAOW,EAAE,CAACX,GAAG,CAAC;MAEvBX,EAAE,CAACoE,QAAQ,CAAC5B,IAAI,EAAE,UAAS7B,GAAG,EAAE0D,MAAM,EAAE;QACtC,IAAI,CAACxE,SAAS,EAAEuC,SAAS,CAACiB,EAAE,CAAC,GAAGgB,MAAM;QACtCF,SAAS,CAACxD,GAAG,EAAE0D,MAAM,CAAC;MACxB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,SAASF,SAASA,CAACxD,GAAG,EAAE0D,MAAM,EAAE7B,IAAI,EAAE;IACpC,IAAI7B,GAAG,EAAE,OAAOW,EAAE,CAACX,GAAG,CAAC;IAEvB,IAAIsC,YAAY,GAAGtD,UAAU,CAACmC,OAAO,CAACW,QAAQ,EAAE4B,MAAM,CAAC;IACvD,IAAIxC,KAAK,EAAEA,KAAK,CAACW,IAAI,CAAC,GAAGS,YAAY;IACrCgB,eAAe,CAAChB,YAAY,CAAC;EAC/B;EAEA,SAASgB,eAAeA,CAAChB,YAAY,EAAE;IACrC;IACArB,CAAC,GAAGjC,UAAU,CAACmC,OAAO,CAACmB,YAAY,EAAErB,CAAC,CAAC+B,KAAK,CAACrB,GAAG,CAAC,CAAC;IAClDI,KAAK,CAAC,CAAC;EACT;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}