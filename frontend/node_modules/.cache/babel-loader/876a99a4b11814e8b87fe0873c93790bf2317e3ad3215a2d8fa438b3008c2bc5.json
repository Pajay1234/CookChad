{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = testpackage;\nexports.usage = 'Tests that the staged package is valid';\nconst fs = require('fs');\nconst path = require('path');\nconst log = require('npmlog');\nconst existsAsync = fs.exists || path.exists;\nconst versioning = require('./util/versioning.js');\nconst napi = require('./util/napi.js');\nconst testbinary = require('./testbinary.js');\nconst tar = require('tar');\nconst makeDir = require('make-dir');\nfunction testpackage(gyp, argv, callback) {\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  const tarball = opts.staged_tarball;\n  existsAsync(tarball, found => {\n    if (!found) {\n      return callback(new Error('Cannot test package because ' + tarball + ' missing: run `node-pre-gyp package` first'));\n    }\n    const to = opts.module_path;\n    function filter_func(entry) {\n      log.info('install', 'unpacking [' + entry.path + ']');\n    }\n    makeDir(to).then(() => {\n      tar.extract({\n        file: tarball,\n        cwd: to,\n        strip: 1,\n        onentry: filter_func\n      }).then(after_extract, callback);\n    }).catch(err => {\n      return callback(err);\n    });\n    function after_extract() {\n      testbinary(gyp, argv, err => {\n        if (err) {\n          return callback(err);\n        } else {\n          console.log('[' + package_json.name + '] Package appears valid');\n          return callback();\n        }\n      });\n    }\n  });\n}","map":{"version":3,"names":["module","exports","testpackage","usage","fs","require","path","log","existsAsync","exists","versioning","napi","testbinary","tar","makeDir","gyp","argv","callback","package_json","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","tarball","staged_tarball","found","Error","to","module_path","filter_func","entry","info","then","extract","file","cwd","strip","onentry","after_extract","catch","err","console","name"],"sources":["C:/Users/Ryan/Documents/school/fall 2023/cmpe 133/project/CookChad/frontend/node_modules/@mapbox/node-pre-gyp/lib/testpackage.js"],"sourcesContent":["'use strict';\n\nmodule.exports = exports = testpackage;\n\nexports.usage = 'Tests that the staged package is valid';\n\nconst fs = require('fs');\nconst path = require('path');\nconst log = require('npmlog');\nconst existsAsync = fs.exists || path.exists;\nconst versioning = require('./util/versioning.js');\nconst napi = require('./util/napi.js');\nconst testbinary = require('./testbinary.js');\nconst tar = require('tar');\nconst makeDir = require('make-dir');\n\nfunction testpackage(gyp, argv, callback) {\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  const tarball = opts.staged_tarball;\n  existsAsync(tarball, (found) => {\n    if (!found) {\n      return callback(new Error('Cannot test package because ' + tarball + ' missing: run `node-pre-gyp package` first'));\n    }\n    const to = opts.module_path;\n    function filter_func(entry) {\n      log.info('install', 'unpacking [' + entry.path + ']');\n    }\n\n    makeDir(to).then(() => {\n      tar.extract({\n        file: tarball,\n        cwd: to,\n        strip: 1,\n        onentry: filter_func\n      }).then(after_extract, callback);\n    }).catch((err) => {\n      return callback(err);\n    });\n\n    function after_extract() {\n      testbinary(gyp, argv, (err) => {\n        if (err) {\n          return callback(err);\n        } else {\n          console.log('[' + package_json.name + '] Package appears valid');\n          return callback();\n        }\n      });\n    }\n  });\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGA,OAAO,GAAGC,WAAW;AAEtCD,OAAO,CAACE,KAAK,GAAG,wCAAwC;AAExD,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,GAAG,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC7B,MAAMG,WAAW,GAAGJ,EAAE,CAACK,MAAM,IAAIH,IAAI,CAACG,MAAM;AAC5C,MAAMC,UAAU,GAAGL,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAMM,IAAI,GAAGN,OAAO,CAAC,gBAAgB,CAAC;AACtC,MAAMO,UAAU,GAAGP,OAAO,CAAC,iBAAiB,CAAC;AAC7C,MAAMQ,GAAG,GAAGR,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMS,OAAO,GAAGT,OAAO,CAAC,UAAU,CAAC;AAEnC,SAASH,WAAWA,CAACa,GAAG,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EACxC,MAAMC,YAAY,GAAGH,GAAG,CAACG,YAAY;EACrC,MAAMC,kBAAkB,GAAGR,IAAI,CAACS,wCAAwC,CAACJ,IAAI,CAAC;EAC9E,MAAMK,IAAI,GAAGX,UAAU,CAACY,QAAQ,CAACJ,YAAY,EAAEH,GAAG,CAACM,IAAI,EAAEF,kBAAkB,CAAC;EAC5E,MAAMI,OAAO,GAAGF,IAAI,CAACG,cAAc;EACnChB,WAAW,CAACe,OAAO,EAAGE,KAAK,IAAK;IAC9B,IAAI,CAACA,KAAK,EAAE;MACV,OAAOR,QAAQ,CAAC,IAAIS,KAAK,CAAC,8BAA8B,GAAGH,OAAO,GAAG,4CAA4C,CAAC,CAAC;IACrH;IACA,MAAMI,EAAE,GAAGN,IAAI,CAACO,WAAW;IAC3B,SAASC,WAAWA,CAACC,KAAK,EAAE;MAC1BvB,GAAG,CAACwB,IAAI,CAAC,SAAS,EAAE,aAAa,GAAGD,KAAK,CAACxB,IAAI,GAAG,GAAG,CAAC;IACvD;IAEAQ,OAAO,CAACa,EAAE,CAAC,CAACK,IAAI,CAAC,MAAM;MACrBnB,GAAG,CAACoB,OAAO,CAAC;QACVC,IAAI,EAAEX,OAAO;QACbY,GAAG,EAAER,EAAE;QACPS,KAAK,EAAE,CAAC;QACRC,OAAO,EAAER;MACX,CAAC,CAAC,CAACG,IAAI,CAACM,aAAa,EAAErB,QAAQ,CAAC;IAClC,CAAC,CAAC,CAACsB,KAAK,CAAEC,GAAG,IAAK;MAChB,OAAOvB,QAAQ,CAACuB,GAAG,CAAC;IACtB,CAAC,CAAC;IAEF,SAASF,aAAaA,CAAA,EAAG;MACvB1B,UAAU,CAACG,GAAG,EAAEC,IAAI,EAAGwB,GAAG,IAAK;QAC7B,IAAIA,GAAG,EAAE;UACP,OAAOvB,QAAQ,CAACuB,GAAG,CAAC;QACtB,CAAC,MAAM;UACLC,OAAO,CAAClC,GAAG,CAAC,GAAG,GAAGW,YAAY,CAACwB,IAAI,GAAG,yBAAyB,CAAC;UAChE,OAAOzB,QAAQ,CAAC,CAAC;QACnB;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}