{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = testbinary;\nexports.usage = 'Tests that the binary.node can be required';\nconst path = require('path');\nconst log = require('npmlog');\nconst cp = require('child_process');\nconst versioning = require('./util/versioning.js');\nconst napi = require('./util/napi.js');\nfunction testbinary(gyp, argv, callback) {\n  const args = [];\n  const options = {};\n  let shell_cmd = process.execPath;\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  // skip validation for runtimes we don't explicitly support (like electron)\n  if (opts.runtime && opts.runtime !== 'node-webkit' && opts.runtime !== 'node') {\n    return callback();\n  }\n  const nw = opts.runtime && opts.runtime === 'node-webkit';\n  // ensure on windows that / are used for require path\n  const binary_module = opts.module.replace(/\\\\/g, '/');\n  if (process.arch !== opts.target_arch || process.platform !== opts.target_platform) {\n    let msg = 'skipping validation since host platform/arch (';\n    msg += process.platform + '/' + process.arch + ')';\n    msg += ' does not match target (';\n    msg += opts.target_platform + '/' + opts.target_arch + ')';\n    log.info('validate', msg);\n    return callback();\n  }\n  if (nw) {\n    options.timeout = 5000;\n    if (process.platform === 'darwin') {\n      shell_cmd = 'node-webkit';\n    } else if (process.platform === 'win32') {\n      shell_cmd = 'nw.exe';\n    } else {\n      shell_cmd = 'nw';\n    }\n    const modulePath = path.resolve(binary_module);\n    const appDir = path.join(__dirname, 'util', 'nw-pre-gyp');\n    args.push(appDir);\n    args.push(modulePath);\n    log.info('validate', \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n    cp.execFile(shell_cmd, args, options, (err, stdout, stderr) => {\n      // check for normal timeout for node-webkit\n      if (err) {\n        if (err.killed === true && err.signal && err.signal.indexOf('SIG') > -1) {\n          return callback();\n        }\n        const stderrLog = stderr.toString();\n        log.info('stderr', stderrLog);\n        if (/^\\s*Xlib:\\s*extension\\s*\"RANDR\"\\s*missing\\s*on\\s*display\\s*\":\\d+\\.\\d+\"\\.\\s*$/.test(stderrLog)) {\n          log.info('RANDR', 'stderr contains only RANDR error, ignored');\n          return callback();\n        }\n        return callback(err);\n      }\n      return callback();\n    });\n    return;\n  }\n  args.push('--eval');\n  args.push(\"require('\" + binary_module.replace(/'/g, '\\'') + \"')\");\n  log.info('validate', \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n  cp.execFile(shell_cmd, args, options, (err, stdout, stderr) => {\n    if (err) {\n      return callback(err, {\n        stdout: stdout,\n        stderr: stderr\n      });\n    }\n    return callback();\n  });\n}","map":{"version":3,"names":["module","exports","testbinary","usage","path","require","log","cp","versioning","napi","gyp","argv","callback","args","options","shell_cmd","process","execPath","package_json","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","runtime","nw","binary_module","replace","arch","target_arch","platform","target_platform","msg","info","timeout","modulePath","resolve","appDir","join","__dirname","push","execFile","err","stdout","stderr","killed","signal","indexOf","stderrLog","toString","test"],"sources":["C:/Users/Ryan/Documents/school/fall 2023/cmpe 133/project/CookChad/frontend/node_modules/@mapbox/node-pre-gyp/lib/testbinary.js"],"sourcesContent":["'use strict';\n\nmodule.exports = exports = testbinary;\n\nexports.usage = 'Tests that the binary.node can be required';\n\nconst path = require('path');\nconst log = require('npmlog');\nconst cp = require('child_process');\nconst versioning = require('./util/versioning.js');\nconst napi = require('./util/napi.js');\n\nfunction testbinary(gyp, argv, callback) {\n  const args = [];\n  const options = {};\n  let shell_cmd = process.execPath;\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  // skip validation for runtimes we don't explicitly support (like electron)\n  if (opts.runtime &&\n        opts.runtime !== 'node-webkit' &&\n        opts.runtime !== 'node') {\n    return callback();\n  }\n  const nw = (opts.runtime && opts.runtime === 'node-webkit');\n  // ensure on windows that / are used for require path\n  const binary_module = opts.module.replace(/\\\\/g, '/');\n  if ((process.arch !== opts.target_arch) ||\n        (process.platform !== opts.target_platform)) {\n    let msg = 'skipping validation since host platform/arch (';\n    msg += process.platform + '/' + process.arch + ')';\n    msg += ' does not match target (';\n    msg += opts.target_platform + '/' + opts.target_arch + ')';\n    log.info('validate', msg);\n    return callback();\n  }\n  if (nw) {\n    options.timeout = 5000;\n    if (process.platform === 'darwin') {\n      shell_cmd = 'node-webkit';\n    } else if (process.platform === 'win32') {\n      shell_cmd = 'nw.exe';\n    } else {\n      shell_cmd = 'nw';\n    }\n    const modulePath = path.resolve(binary_module);\n    const appDir = path.join(__dirname, 'util', 'nw-pre-gyp');\n    args.push(appDir);\n    args.push(modulePath);\n    log.info('validate', \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n    cp.execFile(shell_cmd, args, options, (err, stdout, stderr) => {\n      // check for normal timeout for node-webkit\n      if (err) {\n        if (err.killed === true && err.signal && err.signal.indexOf('SIG') > -1) {\n          return callback();\n        }\n        const stderrLog = stderr.toString();\n        log.info('stderr', stderrLog);\n        if (/^\\s*Xlib:\\s*extension\\s*\"RANDR\"\\s*missing\\s*on\\s*display\\s*\":\\d+\\.\\d+\"\\.\\s*$/.test(stderrLog)) {\n          log.info('RANDR', 'stderr contains only RANDR error, ignored');\n          return callback();\n        }\n        return callback(err);\n      }\n      return callback();\n    });\n    return;\n  }\n  args.push('--eval');\n  args.push(\"require('\" + binary_module.replace(/'/g, '\\'') + \"')\");\n  log.info('validate', \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n  cp.execFile(shell_cmd, args, options, (err, stdout, stderr) => {\n    if (err) {\n      return callback(err, { stdout: stdout, stderr: stderr });\n    }\n    return callback();\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}