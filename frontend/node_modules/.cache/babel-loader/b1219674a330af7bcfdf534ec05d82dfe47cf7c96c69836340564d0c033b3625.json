{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = handle_gyp_opts;\nconst versioning = require('./versioning.js');\nconst napi = require('./napi.js');\n\n/*\n\nHere we gather node-pre-gyp generated options (from versioning) and pass them along to node-gyp.\n\nWe massage the args and options slightly to account for differences in what commands mean between\nnode-pre-gyp and node-gyp (e.g. see the difference between \"build\" and \"rebuild\" below)\n\nKeep in mind: the values inside `argv` and `gyp.opts` below are different depending on whether\nnode-pre-gyp is called directory, or if it is called in a `run-script` phase of npm.\n\nWe also try to preserve any command line options that might have been passed to npm or node-pre-gyp.\nBut this is fairly difficult without passing way to much through. For example `gyp.opts` contains all\nthe process.env and npm pushes a lot of variables into process.env which node-pre-gyp inherits. So we have\nto be very selective about what we pass through.\n\nFor example:\n\n`npm install --build-from-source` will give:\n\nargv == [ 'rebuild' ]\ngyp.opts.argv == { remain: [ 'install' ],\n  cooked: [ 'install', '--fallback-to-build' ],\n  original: [ 'install', '--fallback-to-build' ] }\n\n`./bin/node-pre-gyp build` will give:\n\nargv == []\ngyp.opts.argv == { remain: [ 'build' ],\n  cooked: [ 'build' ],\n  original: [ '-C', 'test/app1', 'build' ] }\n\n*/\n\n// select set of node-pre-gyp versioning info\n// to share with node-gyp\nconst share_with_node_gyp = ['module', 'module_name', 'module_path', 'napi_version', 'node_abi_napi', 'napi_build_version', 'node_napi_label'];\nfunction handle_gyp_opts(gyp, argv, callback) {\n  // Collect node-pre-gyp specific variables to pass to node-gyp\n  const node_pre_gyp_options = [];\n  // generate custom node-pre-gyp versioning info\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(gyp.package_json, gyp.opts, napi_build_version);\n  share_with_node_gyp.forEach(key => {\n    const val = opts[key];\n    if (val) {\n      node_pre_gyp_options.push('--' + key + '=' + val);\n    } else if (key === 'napi_build_version') {\n      node_pre_gyp_options.push('--' + key + '=0');\n    } else {\n      if (key !== 'napi_version' && key !== 'node_abi_napi') return callback(new Error('Option ' + key + ' required but not found by node-pre-gyp'));\n    }\n  });\n\n  // Collect options that follow the special -- which disables nopt parsing\n  const unparsed_options = [];\n  let double_hyphen_found = false;\n  gyp.opts.argv.original.forEach(opt => {\n    if (double_hyphen_found) {\n      unparsed_options.push(opt);\n    }\n    if (opt === '--') {\n      double_hyphen_found = true;\n    }\n  });\n\n  // We try respect and pass through remaining command\n  // line options (like --foo=bar) to node-gyp\n  const cooked = gyp.opts.argv.cooked;\n  const node_gyp_options = [];\n  cooked.forEach(value => {\n    if (value.length > 2 && value.slice(0, 2) === '--') {\n      const key = value.slice(2);\n      const val = cooked[cooked.indexOf(value) + 1];\n      if (val && val.indexOf('--') === -1) {\n        // handle '--foo=bar' or ['--foo','bar']\n        node_gyp_options.push('--' + key + '=' + val);\n      } else {\n        // pass through --foo\n        node_gyp_options.push(value);\n      }\n    }\n  });\n  const result = {\n    'opts': opts,\n    'gyp': node_gyp_options,\n    'pre': node_pre_gyp_options,\n    'unparsed': unparsed_options\n  };\n  return callback(null, result);\n}","map":{"version":3,"names":["module","exports","handle_gyp_opts","versioning","require","napi","share_with_node_gyp","gyp","argv","callback","node_pre_gyp_options","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","package_json","forEach","key","val","push","Error","unparsed_options","double_hyphen_found","original","opt","cooked","node_gyp_options","value","length","slice","indexOf","result"],"sources":["C:/Users/Ryan/Documents/school/fall 2023/cmpe 133/project/CookChad/frontend/node_modules/@mapbox/node-pre-gyp/lib/util/handle_gyp_opts.js"],"sourcesContent":["'use strict';\n\nmodule.exports = exports = handle_gyp_opts;\n\nconst versioning = require('./versioning.js');\nconst napi = require('./napi.js');\n\n/*\n\nHere we gather node-pre-gyp generated options (from versioning) and pass them along to node-gyp.\n\nWe massage the args and options slightly to account for differences in what commands mean between\nnode-pre-gyp and node-gyp (e.g. see the difference between \"build\" and \"rebuild\" below)\n\nKeep in mind: the values inside `argv` and `gyp.opts` below are different depending on whether\nnode-pre-gyp is called directory, or if it is called in a `run-script` phase of npm.\n\nWe also try to preserve any command line options that might have been passed to npm or node-pre-gyp.\nBut this is fairly difficult without passing way to much through. For example `gyp.opts` contains all\nthe process.env and npm pushes a lot of variables into process.env which node-pre-gyp inherits. So we have\nto be very selective about what we pass through.\n\nFor example:\n\n`npm install --build-from-source` will give:\n\nargv == [ 'rebuild' ]\ngyp.opts.argv == { remain: [ 'install' ],\n  cooked: [ 'install', '--fallback-to-build' ],\n  original: [ 'install', '--fallback-to-build' ] }\n\n`./bin/node-pre-gyp build` will give:\n\nargv == []\ngyp.opts.argv == { remain: [ 'build' ],\n  cooked: [ 'build' ],\n  original: [ '-C', 'test/app1', 'build' ] }\n\n*/\n\n// select set of node-pre-gyp versioning info\n// to share with node-gyp\nconst share_with_node_gyp = [\n  'module',\n  'module_name',\n  'module_path',\n  'napi_version',\n  'node_abi_napi',\n  'napi_build_version',\n  'node_napi_label'\n];\n\nfunction handle_gyp_opts(gyp, argv, callback) {\n\n  // Collect node-pre-gyp specific variables to pass to node-gyp\n  const node_pre_gyp_options = [];\n  // generate custom node-pre-gyp versioning info\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(gyp.package_json, gyp.opts, napi_build_version);\n  share_with_node_gyp.forEach((key) => {\n    const val = opts[key];\n    if (val) {\n      node_pre_gyp_options.push('--' + key + '=' + val);\n    } else if (key === 'napi_build_version') {\n      node_pre_gyp_options.push('--' + key + '=0');\n    } else {\n      if (key !== 'napi_version' && key !== 'node_abi_napi')\n        return callback(new Error('Option ' + key + ' required but not found by node-pre-gyp'));\n    }\n  });\n\n  // Collect options that follow the special -- which disables nopt parsing\n  const unparsed_options = [];\n  let double_hyphen_found = false;\n  gyp.opts.argv.original.forEach((opt) => {\n    if (double_hyphen_found) {\n      unparsed_options.push(opt);\n    }\n    if (opt === '--') {\n      double_hyphen_found = true;\n    }\n  });\n\n  // We try respect and pass through remaining command\n  // line options (like --foo=bar) to node-gyp\n  const cooked = gyp.opts.argv.cooked;\n  const node_gyp_options = [];\n  cooked.forEach((value) => {\n    if (value.length > 2 && value.slice(0, 2) === '--') {\n      const key = value.slice(2);\n      const val = cooked[cooked.indexOf(value) + 1];\n      if (val && val.indexOf('--') === -1) { // handle '--foo=bar' or ['--foo','bar']\n        node_gyp_options.push('--' + key + '=' + val);\n      } else { // pass through --foo\n        node_gyp_options.push(value);\n      }\n    }\n  });\n\n  const result = { 'opts': opts, 'gyp': node_gyp_options, 'pre': node_pre_gyp_options, 'unparsed': unparsed_options };\n  return callback(null, result);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}