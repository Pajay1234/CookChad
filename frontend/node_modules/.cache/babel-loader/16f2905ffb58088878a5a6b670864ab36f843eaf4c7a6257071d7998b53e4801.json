{"ast":null,"code":"'use strict';\n\n// this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\nconst warner = require('./warn-mixin.js');\nconst Header = require('./header.js');\nconst EE = require('events');\nconst Yallist = require('yallist');\nconst maxMetaEntrySize = 1024 * 1024;\nconst Entry = require('./read-entry.js');\nconst Pax = require('./pax.js');\nconst zlib = require('minizlib');\nconst {\n  nextTick\n} = require('process');\nconst gzipHeader = Buffer.from([0x1f, 0x8b]);\nconst STATE = Symbol('state');\nconst WRITEENTRY = Symbol('writeEntry');\nconst READENTRY = Symbol('readEntry');\nconst NEXTENTRY = Symbol('nextEntry');\nconst PROCESSENTRY = Symbol('processEntry');\nconst EX = Symbol('extendedHeader');\nconst GEX = Symbol('globalExtendedHeader');\nconst META = Symbol('meta');\nconst EMITMETA = Symbol('emitMeta');\nconst BUFFER = Symbol('buffer');\nconst QUEUE = Symbol('queue');\nconst ENDED = Symbol('ended');\nconst EMITTEDEND = Symbol('emittedEnd');\nconst EMIT = Symbol('emit');\nconst UNZIP = Symbol('unzip');\nconst CONSUMECHUNK = Symbol('consumeChunk');\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub');\nconst CONSUMEBODY = Symbol('consumeBody');\nconst CONSUMEMETA = Symbol('consumeMeta');\nconst CONSUMEHEADER = Symbol('consumeHeader');\nconst CONSUMING = Symbol('consuming');\nconst BUFFERCONCAT = Symbol('bufferConcat');\nconst MAYBEEND = Symbol('maybeEnd');\nconst WRITING = Symbol('writing');\nconst ABORTED = Symbol('aborted');\nconst DONE = Symbol('onDone');\nconst SAW_VALID_ENTRY = Symbol('sawValidEntry');\nconst SAW_NULL_BLOCK = Symbol('sawNullBlock');\nconst SAW_EOF = Symbol('sawEOF');\nconst CLOSESTREAM = Symbol('closeStream');\nconst noop = _ => true;\nmodule.exports = warner(class Parser extends EE {\n  constructor(opt) {\n    opt = opt || {};\n    super(opt);\n    this.file = opt.file || '';\n\n    // set to boolean false when an entry starts.  1024 bytes of \\0\n    // is technically a valid tarball, albeit a boring one.\n    this[SAW_VALID_ENTRY] = null;\n\n    // these BADARCHIVE errors can't be detected early. listen on DONE.\n    this.on(DONE, _ => {\n      if (this[STATE] === 'begin' || this[SAW_VALID_ENTRY] === false) {\n        // either less than 1 block of data, or all entries were invalid.\n        // Either way, probably not even a tarball.\n        this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format');\n      }\n    });\n    if (opt.ondone) {\n      this.on(DONE, opt.ondone);\n    } else {\n      this.on(DONE, _ => {\n        this.emit('prefinish');\n        this.emit('finish');\n        this.emit('end');\n      });\n    }\n    this.strict = !!opt.strict;\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop;\n    // Unlike gzip, brotli doesn't have any magic bytes to identify it\n    // Users need to explicitly tell us they're extracting a brotli file\n    // Or we infer from the file extension\n    const isTBR = opt.file && (opt.file.endsWith('.tar.br') || opt.file.endsWith('.tbr'));\n    // if it's a tbr file it MIGHT be brotli, but we don't know until\n    // we look at it and verify it's not a valid tar file.\n    this.brotli = !opt.gzip && opt.brotli !== undefined ? opt.brotli : isTBR ? undefined : false;\n\n    // have to set this so that streams are ok piping into it\n    this.writable = true;\n    this.readable = false;\n    this[QUEUE] = new Yallist();\n    this[BUFFER] = null;\n    this[READENTRY] = null;\n    this[WRITEENTRY] = null;\n    this[STATE] = 'begin';\n    this[META] = '';\n    this[EX] = null;\n    this[GEX] = null;\n    this[ENDED] = false;\n    this[UNZIP] = null;\n    this[ABORTED] = false;\n    this[SAW_NULL_BLOCK] = false;\n    this[SAW_EOF] = false;\n    this.on('end', () => this[CLOSESTREAM]());\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn);\n    }\n    if (typeof opt.onentry === 'function') {\n      this.on('entry', opt.onentry);\n    }\n  }\n  [CONSUMEHEADER](chunk, position) {\n    if (this[SAW_VALID_ENTRY] === null) {\n      this[SAW_VALID_ENTRY] = false;\n    }\n    let header;\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX]);\n    } catch (er) {\n      return this.warn('TAR_ENTRY_INVALID', er);\n    }\n    if (header.nullBlock) {\n      if (this[SAW_NULL_BLOCK]) {\n        this[SAW_EOF] = true;\n        // ending an archive with no entries.  pointless, but legal.\n        if (this[STATE] === 'begin') {\n          this[STATE] = 'header';\n        }\n        this[EMIT]('eof');\n      } else {\n        this[SAW_NULL_BLOCK] = true;\n        this[EMIT]('nullBlock');\n      }\n    } else {\n      this[SAW_NULL_BLOCK] = false;\n      if (!header.cksumValid) {\n        this.warn('TAR_ENTRY_INVALID', 'checksum failure', {\n          header\n        });\n      } else if (!header.path) {\n        this.warn('TAR_ENTRY_INVALID', 'path is required', {\n          header\n        });\n      } else {\n        const type = header.type;\n        if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath required', {\n            header\n          });\n        } else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', {\n            header\n          });\n        } else {\n          const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]);\n\n          // we do this for meta & ignored entries as well, because they\n          // are still valid tar, or else we wouldn't know to ignore them\n          if (!this[SAW_VALID_ENTRY]) {\n            if (entry.remain) {\n              // this might be the one!\n              const onend = () => {\n                if (!entry.invalid) {\n                  this[SAW_VALID_ENTRY] = true;\n                }\n              };\n              entry.on('end', onend);\n            } else {\n              this[SAW_VALID_ENTRY] = true;\n            }\n          }\n          if (entry.meta) {\n            if (entry.size > this.maxMetaEntrySize) {\n              entry.ignore = true;\n              this[EMIT]('ignoredEntry', entry);\n              this[STATE] = 'ignore';\n              entry.resume();\n            } else if (entry.size > 0) {\n              this[META] = '';\n              entry.on('data', c => this[META] += c);\n              this[STATE] = 'meta';\n            }\n          } else {\n            this[EX] = null;\n            entry.ignore = entry.ignore || !this.filter(entry.path, entry);\n            if (entry.ignore) {\n              // probably valid, just not something we care about\n              this[EMIT]('ignoredEntry', entry);\n              this[STATE] = entry.remain ? 'ignore' : 'header';\n              entry.resume();\n            } else {\n              if (entry.remain) {\n                this[STATE] = 'body';\n              } else {\n                this[STATE] = 'header';\n                entry.end();\n              }\n              if (!this[READENTRY]) {\n                this[QUEUE].push(entry);\n                this[NEXTENTRY]();\n              } else {\n                this[QUEUE].push(entry);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  [CLOSESTREAM]() {\n    nextTick(() => this.emit('close'));\n  }\n  [PROCESSENTRY](entry) {\n    let go = true;\n    if (!entry) {\n      this[READENTRY] = null;\n      go = false;\n    } else if (Array.isArray(entry)) {\n      this.emit.apply(this, entry);\n    } else {\n      this[READENTRY] = entry;\n      this.emit('entry', entry);\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]());\n        go = false;\n      }\n    }\n    return go;\n  }\n  [NEXTENTRY]() {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()));\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY];\n      const drainNow = !re || re.flowing || re.size === re.remain;\n      if (drainNow) {\n        if (!this[WRITING]) {\n          this.emit('drain');\n        }\n      } else {\n        re.once('drain', _ => this.emit('drain'));\n      }\n    }\n  }\n  [CONSUMEBODY](chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY];\n    const br = entry.blockRemain;\n    const c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);\n    entry.write(c);\n    if (!entry.blockRemain) {\n      this[STATE] = 'header';\n      this[WRITEENTRY] = null;\n      entry.end();\n    }\n    return c.length;\n  }\n  [CONSUMEMETA](chunk, position) {\n    const entry = this[WRITEENTRY];\n    const ret = this[CONSUMEBODY](chunk, position);\n\n    // if we finished, then the entry is reset\n    if (!this[WRITEENTRY]) {\n      this[EMITMETA](entry);\n    }\n    return ret;\n  }\n  [EMIT](ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY]) {\n      this.emit(ev, data, extra);\n    } else {\n      this[QUEUE].push([ev, data, extra]);\n    }\n  }\n  [EMITMETA](entry) {\n    this[EMIT]('meta', this[META]);\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false);\n        break;\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true);\n        break;\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null);\n        this[EX].path = this[META].replace(/\\0.*/, '');\n        break;\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null);\n        this[EX].linkpath = this[META].replace(/\\0.*/, '');\n        break;\n\n      /* istanbul ignore next */\n      default:\n        throw new Error('unknown meta: ' + entry.type);\n    }\n  }\n  abort(error) {\n    this[ABORTED] = true;\n    this.emit('abort', error);\n    // always throws, even in non-strict mode\n    this.warn('TAR_ABORT', error, {\n      recoverable: false\n    });\n  }\n  write(chunk) {\n    if (this[ABORTED]) {\n      return;\n    }\n\n    // first write, might be gzipped\n    const needSniff = this[UNZIP] === null || this.brotli === undefined && this[UNZIP] === false;\n    if (needSniff && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk]);\n        this[BUFFER] = null;\n      }\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk;\n        return true;\n      }\n\n      // look for gzip header\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i]) {\n          this[UNZIP] = false;\n        }\n      }\n      const maybeBrotli = this.brotli === undefined;\n      if (this[UNZIP] === false && maybeBrotli) {\n        // read the first header to see if it's a valid tar file. If so,\n        // we can safely assume that it's not actually brotli, despite the\n        // .tbr or .tar.br file extension.\n        // if we ended before getting a full chunk, yes, def brotli\n        if (chunk.length < 512) {\n          if (this[ENDED]) {\n            this.brotli = true;\n          } else {\n            this[BUFFER] = chunk;\n            return true;\n          }\n        } else {\n          // if it's tar, it's pretty reliably not brotli, chances of\n          // that happening are astronomical.\n          try {\n            new Header(chunk.slice(0, 512));\n            this.brotli = false;\n          } catch (_) {\n            this.brotli = true;\n          }\n        }\n      }\n      if (this[UNZIP] === null || this[UNZIP] === false && this.brotli) {\n        const ended = this[ENDED];\n        this[ENDED] = false;\n        this[UNZIP] = this[UNZIP] === null ? new zlib.Unzip() : new zlib.BrotliDecompress();\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk));\n        this[UNZIP].on('error', er => this.abort(er));\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true;\n          this[CONSUMECHUNK]();\n        });\n        this[WRITING] = true;\n        const ret = this[UNZIP][ended ? 'end' : 'write'](chunk);\n        this[WRITING] = false;\n        return ret;\n      }\n    }\n    this[WRITING] = true;\n    if (this[UNZIP]) {\n      this[UNZIP].write(chunk);\n    } else {\n      this[CONSUMECHUNK](chunk);\n    }\n    this[WRITING] = false;\n\n    // return false if there's a queue, or if the current entry isn't flowing\n    const ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true;\n\n    // if we have no queue, then that means a clogged READENTRY\n    if (!ret && !this[QUEUE].length) {\n      this[READENTRY].once('drain', _ => this.emit('drain'));\n    }\n    return ret;\n  }\n  [BUFFERCONCAT](c) {\n    if (c && !this[ABORTED]) {\n      this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;\n    }\n  }\n  [MAYBEEND]() {\n    if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {\n      this[EMITTEDEND] = true;\n      const entry = this[WRITEENTRY];\n      if (entry && entry.blockRemain) {\n        // truncated, likely a damaged file\n        const have = this[BUFFER] ? this[BUFFER].length : 0;\n        this.warn('TAR_BAD_ARCHIVE', `Truncated input (needed ${entry.blockRemain} more bytes, only ${have} available)`, {\n          entry\n        });\n        if (this[BUFFER]) {\n          entry.write(this[BUFFER]);\n        }\n        entry.end();\n      }\n      this[EMIT](DONE);\n    }\n  }\n  [CONSUMECHUNK](chunk) {\n    if (this[CONSUMING]) {\n      this[BUFFERCONCAT](chunk);\n    } else if (!chunk && !this[BUFFER]) {\n      this[MAYBEEND]();\n    } else {\n      this[CONSUMING] = true;\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk);\n        const c = this[BUFFER];\n        this[BUFFER] = null;\n        this[CONSUMECHUNKSUB](c);\n      } else {\n        this[CONSUMECHUNKSUB](chunk);\n      }\n      while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED] && !this[SAW_EOF]) {\n        const c = this[BUFFER];\n        this[BUFFER] = null;\n        this[CONSUMECHUNKSUB](c);\n      }\n      this[CONSUMING] = false;\n    }\n    if (!this[BUFFER] || this[ENDED]) {\n      this[MAYBEEND]();\n    }\n  }\n  [CONSUMECHUNKSUB](chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0;\n    const length = chunk.length;\n    while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {\n      switch (this[STATE]) {\n        case 'begin':\n        case 'header':\n          this[CONSUMEHEADER](chunk, position);\n          position += 512;\n          break;\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position);\n          break;\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position);\n          break;\n\n        /* istanbul ignore next */\n        default:\n          throw new Error('invalid state: ' + this[STATE]);\n      }\n    }\n    if (position < length) {\n      if (this[BUFFER]) {\n        this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);\n      } else {\n        this[BUFFER] = chunk.slice(position);\n      }\n    }\n  }\n  end(chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP]) {\n        this[UNZIP].end(chunk);\n      } else {\n        this[ENDED] = true;\n        if (this.brotli === undefined) chunk = chunk || Buffer.alloc(0);\n        this.write(chunk);\n      }\n    }\n  }\n});","map":{"version":3,"names":["warner","require","Header","EE","Yallist","maxMetaEntrySize","Entry","Pax","zlib","nextTick","gzipHeader","Buffer","from","STATE","Symbol","WRITEENTRY","READENTRY","NEXTENTRY","PROCESSENTRY","EX","GEX","META","EMITMETA","BUFFER","QUEUE","ENDED","EMITTEDEND","EMIT","UNZIP","CONSUMECHUNK","CONSUMECHUNKSUB","CONSUMEBODY","CONSUMEMETA","CONSUMEHEADER","CONSUMING","BUFFERCONCAT","MAYBEEND","WRITING","ABORTED","DONE","SAW_VALID_ENTRY","SAW_NULL_BLOCK","SAW_EOF","CLOSESTREAM","noop","_","module","exports","Parser","constructor","opt","file","on","warn","ondone","emit","strict","filter","isTBR","endsWith","brotli","gzip","undefined","writable","readable","onwarn","onentry","chunk","position","header","er","nullBlock","cksumValid","path","type","test","linkpath","entry","remain","onend","invalid","meta","size","ignore","resume","c","end","push","go","Array","isArray","apply","emittedEnd","shift","length","re","drainNow","flowing","once","br","blockRemain","slice","write","ret","ev","data","extra","parse","Object","create","replace","Error","abort","error","recoverable","needSniff","concat","i","maybeBrotli","ended","Unzip","BrotliDecompress","have","alloc"],"sources":["C:/Users/Ryan/Documents/school/fall 2023/cmpe 133/project/CookChad/frontend/node_modules/tar/lib/parse.js"],"sourcesContent":["'use strict'\n\n// this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\n\nconst warner = require('./warn-mixin.js')\nconst Header = require('./header.js')\nconst EE = require('events')\nconst Yallist = require('yallist')\nconst maxMetaEntrySize = 1024 * 1024\nconst Entry = require('./read-entry.js')\nconst Pax = require('./pax.js')\nconst zlib = require('minizlib')\nconst { nextTick } = require('process')\n\nconst gzipHeader = Buffer.from([0x1f, 0x8b])\nconst STATE = Symbol('state')\nconst WRITEENTRY = Symbol('writeEntry')\nconst READENTRY = Symbol('readEntry')\nconst NEXTENTRY = Symbol('nextEntry')\nconst PROCESSENTRY = Symbol('processEntry')\nconst EX = Symbol('extendedHeader')\nconst GEX = Symbol('globalExtendedHeader')\nconst META = Symbol('meta')\nconst EMITMETA = Symbol('emitMeta')\nconst BUFFER = Symbol('buffer')\nconst QUEUE = Symbol('queue')\nconst ENDED = Symbol('ended')\nconst EMITTEDEND = Symbol('emittedEnd')\nconst EMIT = Symbol('emit')\nconst UNZIP = Symbol('unzip')\nconst CONSUMECHUNK = Symbol('consumeChunk')\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub')\nconst CONSUMEBODY = Symbol('consumeBody')\nconst CONSUMEMETA = Symbol('consumeMeta')\nconst CONSUMEHEADER = Symbol('consumeHeader')\nconst CONSUMING = Symbol('consuming')\nconst BUFFERCONCAT = Symbol('bufferConcat')\nconst MAYBEEND = Symbol('maybeEnd')\nconst WRITING = Symbol('writing')\nconst ABORTED = Symbol('aborted')\nconst DONE = Symbol('onDone')\nconst SAW_VALID_ENTRY = Symbol('sawValidEntry')\nconst SAW_NULL_BLOCK = Symbol('sawNullBlock')\nconst SAW_EOF = Symbol('sawEOF')\nconst CLOSESTREAM = Symbol('closeStream')\n\nconst noop = _ => true\n\nmodule.exports = warner(class Parser extends EE {\n  constructor (opt) {\n    opt = opt || {}\n    super(opt)\n\n    this.file = opt.file || ''\n\n    // set to boolean false when an entry starts.  1024 bytes of \\0\n    // is technically a valid tarball, albeit a boring one.\n    this[SAW_VALID_ENTRY] = null\n\n    // these BADARCHIVE errors can't be detected early. listen on DONE.\n    this.on(DONE, _ => {\n      if (this[STATE] === 'begin' || this[SAW_VALID_ENTRY] === false) {\n        // either less than 1 block of data, or all entries were invalid.\n        // Either way, probably not even a tarball.\n        this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format')\n      }\n    })\n\n    if (opt.ondone) {\n      this.on(DONE, opt.ondone)\n    } else {\n      this.on(DONE, _ => {\n        this.emit('prefinish')\n        this.emit('finish')\n        this.emit('end')\n      })\n    }\n\n    this.strict = !!opt.strict\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop\n    // Unlike gzip, brotli doesn't have any magic bytes to identify it\n    // Users need to explicitly tell us they're extracting a brotli file\n    // Or we infer from the file extension\n    const isTBR = (opt.file && (\n        opt.file.endsWith('.tar.br') || opt.file.endsWith('.tbr')))\n    // if it's a tbr file it MIGHT be brotli, but we don't know until\n    // we look at it and verify it's not a valid tar file.\n    this.brotli = !opt.gzip && opt.brotli !== undefined ? opt.brotli\n      : isTBR ? undefined\n      : false\n\n    // have to set this so that streams are ok piping into it\n    this.writable = true\n    this.readable = false\n\n    this[QUEUE] = new Yallist()\n    this[BUFFER] = null\n    this[READENTRY] = null\n    this[WRITEENTRY] = null\n    this[STATE] = 'begin'\n    this[META] = ''\n    this[EX] = null\n    this[GEX] = null\n    this[ENDED] = false\n    this[UNZIP] = null\n    this[ABORTED] = false\n    this[SAW_NULL_BLOCK] = false\n    this[SAW_EOF] = false\n\n    this.on('end', () => this[CLOSESTREAM]())\n\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn)\n    }\n    if (typeof opt.onentry === 'function') {\n      this.on('entry', opt.onentry)\n    }\n  }\n\n  [CONSUMEHEADER] (chunk, position) {\n    if (this[SAW_VALID_ENTRY] === null) {\n      this[SAW_VALID_ENTRY] = false\n    }\n    let header\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX])\n    } catch (er) {\n      return this.warn('TAR_ENTRY_INVALID', er)\n    }\n\n    if (header.nullBlock) {\n      if (this[SAW_NULL_BLOCK]) {\n        this[SAW_EOF] = true\n        // ending an archive with no entries.  pointless, but legal.\n        if (this[STATE] === 'begin') {\n          this[STATE] = 'header'\n        }\n        this[EMIT]('eof')\n      } else {\n        this[SAW_NULL_BLOCK] = true\n        this[EMIT]('nullBlock')\n      }\n    } else {\n      this[SAW_NULL_BLOCK] = false\n      if (!header.cksumValid) {\n        this.warn('TAR_ENTRY_INVALID', 'checksum failure', { header })\n      } else if (!header.path) {\n        this.warn('TAR_ENTRY_INVALID', 'path is required', { header })\n      } else {\n        const type = header.type\n        if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath required', { header })\n        } else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', { header })\n        } else {\n          const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX])\n\n          // we do this for meta & ignored entries as well, because they\n          // are still valid tar, or else we wouldn't know to ignore them\n          if (!this[SAW_VALID_ENTRY]) {\n            if (entry.remain) {\n              // this might be the one!\n              const onend = () => {\n                if (!entry.invalid) {\n                  this[SAW_VALID_ENTRY] = true\n                }\n              }\n              entry.on('end', onend)\n            } else {\n              this[SAW_VALID_ENTRY] = true\n            }\n          }\n\n          if (entry.meta) {\n            if (entry.size > this.maxMetaEntrySize) {\n              entry.ignore = true\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = 'ignore'\n              entry.resume()\n            } else if (entry.size > 0) {\n              this[META] = ''\n              entry.on('data', c => this[META] += c)\n              this[STATE] = 'meta'\n            }\n          } else {\n            this[EX] = null\n            entry.ignore = entry.ignore || !this.filter(entry.path, entry)\n\n            if (entry.ignore) {\n              // probably valid, just not something we care about\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = entry.remain ? 'ignore' : 'header'\n              entry.resume()\n            } else {\n              if (entry.remain) {\n                this[STATE] = 'body'\n              } else {\n                this[STATE] = 'header'\n                entry.end()\n              }\n\n              if (!this[READENTRY]) {\n                this[QUEUE].push(entry)\n                this[NEXTENTRY]()\n              } else {\n                this[QUEUE].push(entry)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  [CLOSESTREAM] () {\n    nextTick(() => this.emit('close'))\n  }\n\n  [PROCESSENTRY] (entry) {\n    let go = true\n\n    if (!entry) {\n      this[READENTRY] = null\n      go = false\n    } else if (Array.isArray(entry)) {\n      this.emit.apply(this, entry)\n    } else {\n      this[READENTRY] = entry\n      this.emit('entry', entry)\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]())\n        go = false\n      }\n    }\n\n    return go\n  }\n\n  [NEXTENTRY] () {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()))\n\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY]\n      const drainNow = !re || re.flowing || re.size === re.remain\n      if (drainNow) {\n        if (!this[WRITING]) {\n          this.emit('drain')\n        }\n      } else {\n        re.once('drain', _ => this.emit('drain'))\n      }\n    }\n  }\n\n  [CONSUMEBODY] (chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY]\n    const br = entry.blockRemain\n    const c = (br >= chunk.length && position === 0) ? chunk\n      : chunk.slice(position, position + br)\n\n    entry.write(c)\n\n    if (!entry.blockRemain) {\n      this[STATE] = 'header'\n      this[WRITEENTRY] = null\n      entry.end()\n    }\n\n    return c.length\n  }\n\n  [CONSUMEMETA] (chunk, position) {\n    const entry = this[WRITEENTRY]\n    const ret = this[CONSUMEBODY](chunk, position)\n\n    // if we finished, then the entry is reset\n    if (!this[WRITEENTRY]) {\n      this[EMITMETA](entry)\n    }\n\n    return ret\n  }\n\n  [EMIT] (ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY]) {\n      this.emit(ev, data, extra)\n    } else {\n      this[QUEUE].push([ev, data, extra])\n    }\n  }\n\n  [EMITMETA] (entry) {\n    this[EMIT]('meta', this[META])\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false)\n        break\n\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true)\n        break\n\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].path = this[META].replace(/\\0.*/, '')\n        break\n\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].linkpath = this[META].replace(/\\0.*/, '')\n        break\n\n      /* istanbul ignore next */\n      default: throw new Error('unknown meta: ' + entry.type)\n    }\n  }\n\n  abort (error) {\n    this[ABORTED] = true\n    this.emit('abort', error)\n    // always throws, even in non-strict mode\n    this.warn('TAR_ABORT', error, { recoverable: false })\n  }\n\n  write (chunk) {\n    if (this[ABORTED]) {\n      return\n    }\n\n    // first write, might be gzipped\n    const needSniff = this[UNZIP] === null ||\n      this.brotli === undefined && this[UNZIP] === false\n    if (needSniff && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk])\n        this[BUFFER] = null\n      }\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk\n        return true\n      }\n\n      // look for gzip header\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i]) {\n          this[UNZIP] = false\n        }\n      }\n\n      const maybeBrotli = this.brotli === undefined\n      if (this[UNZIP] === false && maybeBrotli) {\n        // read the first header to see if it's a valid tar file. If so,\n        // we can safely assume that it's not actually brotli, despite the\n        // .tbr or .tar.br file extension.\n        // if we ended before getting a full chunk, yes, def brotli\n        if (chunk.length < 512) {\n          if (this[ENDED]) {\n            this.brotli = true\n          } else {\n            this[BUFFER] = chunk\n            return true\n          }\n        } else {\n          // if it's tar, it's pretty reliably not brotli, chances of\n          // that happening are astronomical.\n          try {\n            new Header(chunk.slice(0, 512))\n            this.brotli = false\n          } catch (_) {\n            this.brotli = true\n          }\n        }\n      }\n\n      if (this[UNZIP] === null || (this[UNZIP] === false && this.brotli)) {\n        const ended = this[ENDED]\n        this[ENDED] = false\n        this[UNZIP] = this[UNZIP] === null\n          ? new zlib.Unzip()\n          : new zlib.BrotliDecompress()\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk))\n        this[UNZIP].on('error', er => this.abort(er))\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true\n          this[CONSUMECHUNK]()\n        })\n        this[WRITING] = true\n        const ret = this[UNZIP][ended ? 'end' : 'write'](chunk)\n        this[WRITING] = false\n        return ret\n      }\n    }\n\n    this[WRITING] = true\n    if (this[UNZIP]) {\n      this[UNZIP].write(chunk)\n    } else {\n      this[CONSUMECHUNK](chunk)\n    }\n    this[WRITING] = false\n\n    // return false if there's a queue, or if the current entry isn't flowing\n    const ret =\n      this[QUEUE].length ? false :\n      this[READENTRY] ? this[READENTRY].flowing :\n      true\n\n    // if we have no queue, then that means a clogged READENTRY\n    if (!ret && !this[QUEUE].length) {\n      this[READENTRY].once('drain', _ => this.emit('drain'))\n    }\n\n    return ret\n  }\n\n  [BUFFERCONCAT] (c) {\n    if (c && !this[ABORTED]) {\n      this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c\n    }\n  }\n\n  [MAYBEEND] () {\n    if (this[ENDED] &&\n        !this[EMITTEDEND] &&\n        !this[ABORTED] &&\n        !this[CONSUMING]) {\n      this[EMITTEDEND] = true\n      const entry = this[WRITEENTRY]\n      if (entry && entry.blockRemain) {\n        // truncated, likely a damaged file\n        const have = this[BUFFER] ? this[BUFFER].length : 0\n        this.warn('TAR_BAD_ARCHIVE', `Truncated input (needed ${\n          entry.blockRemain} more bytes, only ${have} available)`, { entry })\n        if (this[BUFFER]) {\n          entry.write(this[BUFFER])\n        }\n        entry.end()\n      }\n      this[EMIT](DONE)\n    }\n  }\n\n  [CONSUMECHUNK] (chunk) {\n    if (this[CONSUMING]) {\n      this[BUFFERCONCAT](chunk)\n    } else if (!chunk && !this[BUFFER]) {\n      this[MAYBEEND]()\n    } else {\n      this[CONSUMING] = true\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk)\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      } else {\n        this[CONSUMECHUNKSUB](chunk)\n      }\n\n      while (this[BUFFER] &&\n          this[BUFFER].length >= 512 &&\n          !this[ABORTED] &&\n          !this[SAW_EOF]) {\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      }\n      this[CONSUMING] = false\n    }\n\n    if (!this[BUFFER] || this[ENDED]) {\n      this[MAYBEEND]()\n    }\n  }\n\n  [CONSUMECHUNKSUB] (chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0\n    const length = chunk.length\n    while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {\n      switch (this[STATE]) {\n        case 'begin':\n        case 'header':\n          this[CONSUMEHEADER](chunk, position)\n          position += 512\n          break\n\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position)\n          break\n\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position)\n          break\n\n        /* istanbul ignore next */\n        default:\n          throw new Error('invalid state: ' + this[STATE])\n      }\n    }\n\n    if (position < length) {\n      if (this[BUFFER]) {\n        this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]])\n      } else {\n        this[BUFFER] = chunk.slice(position)\n      }\n    }\n  }\n\n  end (chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP]) {\n        this[UNZIP].end(chunk)\n      } else {\n        this[ENDED] = true\n        if (this.brotli === undefined) chunk = chunk || Buffer.alloc(0)\n        this.write(chunk)\n      }\n    }\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}