{"ast":null,"code":"'use strict';\n\n// the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.\n// but the path reservations are required to avoid race conditions where\n// parallelized unpack ops may mess with one another, due to dependencies\n// (like a Link depending on its target) or destructive operations (like\n// clobbering an fs object to create one of a different type.)\nconst assert = require('assert');\nconst Parser = require('./parse.js');\nconst fs = require('fs');\nconst fsm = require('fs-minipass');\nconst path = require('path');\nconst mkdir = require('./mkdir.js');\nconst wc = require('./winchars.js');\nconst pathReservations = require('./path-reservations.js');\nconst stripAbsolutePath = require('./strip-absolute-path.js');\nconst normPath = require('./normalize-windows-path.js');\nconst stripSlash = require('./strip-trailing-slashes.js');\nconst normalize = require('./normalize-unicode.js');\nconst ONENTRY = Symbol('onEntry');\nconst CHECKFS = Symbol('checkFs');\nconst CHECKFS2 = Symbol('checkFs2');\nconst PRUNECACHE = Symbol('pruneCache');\nconst ISREUSABLE = Symbol('isReusable');\nconst MAKEFS = Symbol('makeFs');\nconst FILE = Symbol('file');\nconst DIRECTORY = Symbol('directory');\nconst LINK = Symbol('link');\nconst SYMLINK = Symbol('symlink');\nconst HARDLINK = Symbol('hardlink');\nconst UNSUPPORTED = Symbol('unsupported');\nconst CHECKPATH = Symbol('checkPath');\nconst MKDIR = Symbol('mkdir');\nconst ONERROR = Symbol('onError');\nconst PENDING = Symbol('pending');\nconst PEND = Symbol('pend');\nconst UNPEND = Symbol('unpend');\nconst ENDED = Symbol('ended');\nconst MAYBECLOSE = Symbol('maybeClose');\nconst SKIP = Symbol('skip');\nconst DOCHOWN = Symbol('doChown');\nconst UID = Symbol('uid');\nconst GID = Symbol('gid');\nconst CHECKED_CWD = Symbol('checkedCwd');\nconst crypto = require('crypto');\nconst getFlag = require('./get-write-flag.js');\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform;\nconst isWindows = platform === 'win32';\n\n// Unlinks on Windows are not atomic.\n//\n// This means that if you have a file entry, followed by another\n// file entry with an identical name, and you cannot re-use the file\n// (because it's a hardlink, or because unlink:true is set, or it's\n// Windows, which does not have useful nlink values), then the unlink\n// will be committed to the disk AFTER the new file has been written\n// over the old one, deleting the new file.\n//\n// To work around this, on Windows systems, we rename the file and then\n// delete the renamed file.  It's a sloppy kludge, but frankly, I do not\n// know of a better way to do this, given windows' non-atomic unlink\n// semantics.\n//\n// See: https://github.com/npm/node-tar/issues/183\n/* istanbul ignore next */\nconst unlinkFile = (path, cb) => {\n  if (!isWindows) {\n    return fs.unlink(path, cb);\n  }\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex');\n  fs.rename(path, name, er => {\n    if (er) {\n      return cb(er);\n    }\n    fs.unlink(name, cb);\n  });\n};\n\n/* istanbul ignore next */\nconst unlinkFileSync = path => {\n  if (!isWindows) {\n    return fs.unlinkSync(path);\n  }\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex');\n  fs.renameSync(path, name);\n  fs.unlinkSync(name);\n};\n\n// this.gid, entry.gid, this.processUid\nconst uint32 = (a, b, c) => a === a >>> 0 ? a : b === b >>> 0 ? b : c;\n\n// clear the cache if it's a case-insensitive unicode-squashing match.\n// we can't know if the current file system is case-sensitive or supports\n// unicode fully, so we check for similarity on the maximally compatible\n// representation.  Err on the side of pruning, since all it's doing is\n// preventing lstats, and it's not the end of the world if we get a false\n// positive.\n// Note that on windows, we always drop the entire cache whenever a\n// symbolic link is encountered, because 8.3 filenames are impossible\n// to reason about, and collisions are hazards rather than just failures.\nconst cacheKeyNormalize = path => stripSlash(normPath(normalize(path))).toLowerCase();\nconst pruneCache = (cache, abs) => {\n  abs = cacheKeyNormalize(abs);\n  for (const path of cache.keys()) {\n    const pnorm = cacheKeyNormalize(path);\n    if (pnorm === abs || pnorm.indexOf(abs + '/') === 0) {\n      cache.delete(path);\n    }\n  }\n};\nconst dropCache = cache => {\n  for (const key of cache.keys()) {\n    cache.delete(key);\n  }\n};\nclass Unpack extends Parser {\n  constructor(opt) {\n    if (!opt) {\n      opt = {};\n    }\n    opt.ondone = _ => {\n      this[ENDED] = true;\n      this[MAYBECLOSE]();\n    };\n    super(opt);\n    this[CHECKED_CWD] = false;\n    this.reservations = pathReservations();\n    this.transform = typeof opt.transform === 'function' ? opt.transform : null;\n    this.writable = true;\n    this.readable = false;\n    this[PENDING] = 0;\n    this[ENDED] = false;\n    this.dirCache = opt.dirCache || new Map();\n    if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {\n      // need both or neither\n      if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number') {\n        throw new TypeError('cannot set owner without number uid and gid');\n      }\n      if (opt.preserveOwner) {\n        throw new TypeError('cannot preserve owner in archive and also set owner explicitly');\n      }\n      this.uid = opt.uid;\n      this.gid = opt.gid;\n      this.setOwner = true;\n    } else {\n      this.uid = null;\n      this.gid = null;\n      this.setOwner = false;\n    }\n\n    // default true for root\n    if (opt.preserveOwner === undefined && typeof opt.uid !== 'number') {\n      this.preserveOwner = process.getuid && process.getuid() === 0;\n    } else {\n      this.preserveOwner = !!opt.preserveOwner;\n    }\n    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ? process.getuid() : null;\n    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ? process.getgid() : null;\n\n    // mostly just for testing, but useful in some cases.\n    // Forcibly trigger a chown on every entry, no matter what\n    this.forceChown = opt.forceChown === true;\n\n    // turn ><?| in filenames into 0xf000-higher encoded forms\n    this.win32 = !!opt.win32 || isWindows;\n\n    // do not unpack over files that are newer than what's in the archive\n    this.newer = !!opt.newer;\n\n    // do not unpack over ANY files\n    this.keep = !!opt.keep;\n\n    // do not set mtime/atime of extracted entries\n    this.noMtime = !!opt.noMtime;\n\n    // allow .., absolute path entries, and unpacking through symlinks\n    // without this, warn and skip .., relativize absolutes, and error\n    // on symlinks in extraction path\n    this.preservePaths = !!opt.preservePaths;\n\n    // unlink files and links before writing. This breaks existing hard\n    // links, and removes symlink directories rather than erroring\n    this.unlink = !!opt.unlink;\n    this.cwd = normPath(path.resolve(opt.cwd || process.cwd()));\n    this.strip = +opt.strip || 0;\n    // if we're not chmodding, then we don't need the process umask\n    this.processUmask = opt.noChmod ? 0 : process.umask();\n    this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask;\n\n    // default mode for dirs created as parents\n    this.dmode = opt.dmode || 0o0777 & ~this.umask;\n    this.fmode = opt.fmode || 0o0666 & ~this.umask;\n    this.on('entry', entry => this[ONENTRY](entry));\n  }\n\n  // a bad or damaged archive is a warning for Parser, but an error\n  // when extracting.  Mark those errors as unrecoverable, because\n  // the Unpack contract cannot be met.\n  warn(code, msg, data = {}) {\n    if (code === 'TAR_BAD_ARCHIVE' || code === 'TAR_ABORT') {\n      data.recoverable = false;\n    }\n    return super.warn(code, msg, data);\n  }\n  [MAYBECLOSE]() {\n    if (this[ENDED] && this[PENDING] === 0) {\n      this.emit('prefinish');\n      this.emit('finish');\n      this.emit('end');\n    }\n  }\n  [CHECKPATH](entry) {\n    if (this.strip) {\n      const parts = normPath(entry.path).split('/');\n      if (parts.length < this.strip) {\n        return false;\n      }\n      entry.path = parts.slice(this.strip).join('/');\n      if (entry.type === 'Link') {\n        const linkparts = normPath(entry.linkpath).split('/');\n        if (linkparts.length >= this.strip) {\n          entry.linkpath = linkparts.slice(this.strip).join('/');\n        } else {\n          return false;\n        }\n      }\n    }\n    if (!this.preservePaths) {\n      const p = normPath(entry.path);\n      const parts = p.split('/');\n      if (parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(parts[0])) {\n        this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {\n          entry,\n          path: p\n        });\n        return false;\n      }\n\n      // strip off the root\n      const [root, stripped] = stripAbsolutePath(p);\n      if (root) {\n        entry.path = stripped;\n        this.warn('TAR_ENTRY_INFO', `stripping ${root} from absolute path`, {\n          entry,\n          path: p\n        });\n      }\n    }\n    if (path.isAbsolute(entry.path)) {\n      entry.absolute = normPath(path.resolve(entry.path));\n    } else {\n      entry.absolute = normPath(path.resolve(this.cwd, entry.path));\n    }\n\n    // if we somehow ended up with a path that escapes the cwd, and we are\n    // not in preservePaths mode, then something is fishy!  This should have\n    // been prevented above, so ignore this for coverage.\n    /* istanbul ignore if - defense in depth */\n    if (!this.preservePaths && entry.absolute.indexOf(this.cwd + '/') !== 0 && entry.absolute !== this.cwd) {\n      this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {\n        entry,\n        path: normPath(entry.path),\n        resolvedPath: entry.absolute,\n        cwd: this.cwd\n      });\n      return false;\n    }\n\n    // an archive can set properties on the extraction directory, but it\n    // may not replace the cwd with a different kind of thing entirely.\n    if (entry.absolute === this.cwd && entry.type !== 'Directory' && entry.type !== 'GNUDumpDir') {\n      return false;\n    }\n\n    // only encode : chars that aren't drive letter indicators\n    if (this.win32) {\n      const {\n        root: aRoot\n      } = path.win32.parse(entry.absolute);\n      entry.absolute = aRoot + wc.encode(entry.absolute.slice(aRoot.length));\n      const {\n        root: pRoot\n      } = path.win32.parse(entry.path);\n      entry.path = pRoot + wc.encode(entry.path.slice(pRoot.length));\n    }\n    return true;\n  }\n  [ONENTRY](entry) {\n    if (!this[CHECKPATH](entry)) {\n      return entry.resume();\n    }\n    assert.equal(typeof entry.absolute, 'string');\n    switch (entry.type) {\n      case 'Directory':\n      case 'GNUDumpDir':\n        if (entry.mode) {\n          entry.mode = entry.mode | 0o700;\n        }\n\n      // eslint-disable-next-line no-fallthrough\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n      case 'Link':\n      case 'SymbolicLink':\n        return this[CHECKFS](entry);\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'FIFO':\n      default:\n        return this[UNSUPPORTED](entry);\n    }\n  }\n  [ONERROR](er, entry) {\n    // Cwd has to exist, or else nothing works. That's serious.\n    // Other errors are warnings, which raise the error in strict\n    // mode, but otherwise continue on.\n    if (er.name === 'CwdError') {\n      this.emit('error', er);\n    } else {\n      this.warn('TAR_ENTRY_ERROR', er, {\n        entry\n      });\n      this[UNPEND]();\n      entry.resume();\n    }\n  }\n  [MKDIR](dir, mode, cb) {\n    mkdir(normPath(dir), {\n      uid: this.uid,\n      gid: this.gid,\n      processUid: this.processUid,\n      processGid: this.processGid,\n      umask: this.processUmask,\n      preserve: this.preservePaths,\n      unlink: this.unlink,\n      cache: this.dirCache,\n      cwd: this.cwd,\n      mode: mode,\n      noChmod: this.noChmod\n    }, cb);\n  }\n  [DOCHOWN](entry) {\n    // in preserve owner mode, chown if the entry doesn't match process\n    // in set owner mode, chown if setting doesn't match process\n    return this.forceChown || this.preserveOwner && (typeof entry.uid === 'number' && entry.uid !== this.processUid || typeof entry.gid === 'number' && entry.gid !== this.processGid) || typeof this.uid === 'number' && this.uid !== this.processUid || typeof this.gid === 'number' && this.gid !== this.processGid;\n  }\n  [UID](entry) {\n    return uint32(this.uid, entry.uid, this.processUid);\n  }\n  [GID](entry) {\n    return uint32(this.gid, entry.gid, this.processGid);\n  }\n  [FILE](entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.fmode;\n    const stream = new fsm.WriteStream(entry.absolute, {\n      flags: getFlag(entry.size),\n      mode: mode,\n      autoClose: false\n    });\n    stream.on('error', er => {\n      if (stream.fd) {\n        fs.close(stream.fd, () => {});\n      }\n\n      // flush all the data out so that we aren't left hanging\n      // if the error wasn't actually fatal.  otherwise the parse\n      // is blocked, and we never proceed.\n      stream.write = () => true;\n      this[ONERROR](er, entry);\n      fullyDone();\n    });\n    let actions = 1;\n    const done = er => {\n      if (er) {\n        /* istanbul ignore else - we should always have a fd by now */\n        if (stream.fd) {\n          fs.close(stream.fd, () => {});\n        }\n        this[ONERROR](er, entry);\n        fullyDone();\n        return;\n      }\n      if (--actions === 0) {\n        fs.close(stream.fd, er => {\n          if (er) {\n            this[ONERROR](er, entry);\n          } else {\n            this[UNPEND]();\n          }\n          fullyDone();\n        });\n      }\n    };\n    stream.on('finish', _ => {\n      // if futimes fails, try utimes\n      // if utimes fails, fail with the original error\n      // same for fchown/chown\n      const abs = entry.absolute;\n      const fd = stream.fd;\n      if (entry.mtime && !this.noMtime) {\n        actions++;\n        const atime = entry.atime || new Date();\n        const mtime = entry.mtime;\n        fs.futimes(fd, atime, mtime, er => er ? fs.utimes(abs, atime, mtime, er2 => done(er2 && er)) : done());\n      }\n      if (this[DOCHOWN](entry)) {\n        actions++;\n        const uid = this[UID](entry);\n        const gid = this[GID](entry);\n        fs.fchown(fd, uid, gid, er => er ? fs.chown(abs, uid, gid, er2 => done(er2 && er)) : done());\n      }\n      done();\n    });\n    const tx = this.transform ? this.transform(entry) || entry : entry;\n    if (tx !== entry) {\n      tx.on('error', er => {\n        this[ONERROR](er, entry);\n        fullyDone();\n      });\n      entry.pipe(tx);\n    }\n    tx.pipe(stream);\n  }\n  [DIRECTORY](entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.dmode;\n    this[MKDIR](entry.absolute, mode, er => {\n      if (er) {\n        this[ONERROR](er, entry);\n        fullyDone();\n        return;\n      }\n      let actions = 1;\n      const done = _ => {\n        if (--actions === 0) {\n          fullyDone();\n          this[UNPEND]();\n          entry.resume();\n        }\n      };\n      if (entry.mtime && !this.noMtime) {\n        actions++;\n        fs.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done);\n      }\n      if (this[DOCHOWN](entry)) {\n        actions++;\n        fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done);\n      }\n      done();\n    });\n  }\n  [UNSUPPORTED](entry) {\n    entry.unsupported = true;\n    this.warn('TAR_ENTRY_UNSUPPORTED', `unsupported entry type: ${entry.type}`, {\n      entry\n    });\n    entry.resume();\n  }\n  [SYMLINK](entry, done) {\n    this[LINK](entry, entry.linkpath, 'symlink', done);\n  }\n  [HARDLINK](entry, done) {\n    const linkpath = normPath(path.resolve(this.cwd, entry.linkpath));\n    this[LINK](entry, linkpath, 'link', done);\n  }\n  [PEND]() {\n    this[PENDING]++;\n  }\n  [UNPEND]() {\n    this[PENDING]--;\n    this[MAYBECLOSE]();\n  }\n  [SKIP](entry) {\n    this[UNPEND]();\n    entry.resume();\n  }\n\n  // Check if we can reuse an existing filesystem entry safely and\n  // overwrite it, rather than unlinking and recreating\n  // Windows doesn't report a useful nlink, so we just never reuse entries\n  [ISREUSABLE](entry, st) {\n    return entry.type === 'File' && !this.unlink && st.isFile() && st.nlink <= 1 && !isWindows;\n  }\n\n  // check if a thing is there, and if so, try to clobber it\n  [CHECKFS](entry) {\n    this[PEND]();\n    const paths = [entry.path];\n    if (entry.linkpath) {\n      paths.push(entry.linkpath);\n    }\n    this.reservations.reserve(paths, done => this[CHECKFS2](entry, done));\n  }\n  [PRUNECACHE](entry) {\n    // if we are not creating a directory, and the path is in the dirCache,\n    // then that means we are about to delete the directory we created\n    // previously, and it is no longer going to be a directory, and neither\n    // is any of its children.\n    // If a symbolic link is encountered, all bets are off.  There is no\n    // reasonable way to sanitize the cache in such a way we will be able to\n    // avoid having filesystem collisions.  If this happens with a non-symlink\n    // entry, it'll just fail to unpack, but a symlink to a directory, using an\n    // 8.3 shortname or certain unicode attacks, can evade detection and lead\n    // to arbitrary writes to anywhere on the system.\n    if (entry.type === 'SymbolicLink') {\n      dropCache(this.dirCache);\n    } else if (entry.type !== 'Directory') {\n      pruneCache(this.dirCache, entry.absolute);\n    }\n  }\n  [CHECKFS2](entry, fullyDone) {\n    this[PRUNECACHE](entry);\n    const done = er => {\n      this[PRUNECACHE](entry);\n      fullyDone(er);\n    };\n    const checkCwd = () => {\n      this[MKDIR](this.cwd, this.dmode, er => {\n        if (er) {\n          this[ONERROR](er, entry);\n          done();\n          return;\n        }\n        this[CHECKED_CWD] = true;\n        start();\n      });\n    };\n    const start = () => {\n      if (entry.absolute !== this.cwd) {\n        const parent = normPath(path.dirname(entry.absolute));\n        if (parent !== this.cwd) {\n          return this[MKDIR](parent, this.dmode, er => {\n            if (er) {\n              this[ONERROR](er, entry);\n              done();\n              return;\n            }\n            afterMakeParent();\n          });\n        }\n      }\n      afterMakeParent();\n    };\n    const afterMakeParent = () => {\n      fs.lstat(entry.absolute, (lstatEr, st) => {\n        if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n          this[SKIP](entry);\n          done();\n          return;\n        }\n        if (lstatEr || this[ISREUSABLE](entry, st)) {\n          return this[MAKEFS](null, entry, done);\n        }\n        if (st.isDirectory()) {\n          if (entry.type === 'Directory') {\n            const needChmod = !this.noChmod && entry.mode && (st.mode & 0o7777) !== entry.mode;\n            const afterChmod = er => this[MAKEFS](er, entry, done);\n            if (!needChmod) {\n              return afterChmod();\n            }\n            return fs.chmod(entry.absolute, entry.mode, afterChmod);\n          }\n          // Not a dir entry, have to remove it.\n          // NB: the only way to end up with an entry that is the cwd\n          // itself, in such a way that == does not detect, is a\n          // tricky windows absolute path with UNC or 8.3 parts (and\n          // preservePaths:true, or else it will have been stripped).\n          // In that case, the user has opted out of path protections\n          // explicitly, so if they blow away the cwd, c'est la vie.\n          if (entry.absolute !== this.cwd) {\n            return fs.rmdir(entry.absolute, er => this[MAKEFS](er, entry, done));\n          }\n        }\n\n        // not a dir, and not reusable\n        // don't remove if the cwd, we want that error\n        if (entry.absolute === this.cwd) {\n          return this[MAKEFS](null, entry, done);\n        }\n        unlinkFile(entry.absolute, er => this[MAKEFS](er, entry, done));\n      });\n    };\n    if (this[CHECKED_CWD]) {\n      start();\n    } else {\n      checkCwd();\n    }\n  }\n  [MAKEFS](er, entry, done) {\n    if (er) {\n      this[ONERROR](er, entry);\n      done();\n      return;\n    }\n    switch (entry.type) {\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n        return this[FILE](entry, done);\n      case 'Link':\n        return this[HARDLINK](entry, done);\n      case 'SymbolicLink':\n        return this[SYMLINK](entry, done);\n      case 'Directory':\n      case 'GNUDumpDir':\n        return this[DIRECTORY](entry, done);\n    }\n  }\n  [LINK](entry, linkpath, link, done) {\n    // XXX: get the type ('symlink' or 'junction') for windows\n    fs[link](linkpath, entry.absolute, er => {\n      if (er) {\n        this[ONERROR](er, entry);\n      } else {\n        this[UNPEND]();\n        entry.resume();\n      }\n      done();\n    });\n  }\n}\nconst callSync = fn => {\n  try {\n    return [null, fn()];\n  } catch (er) {\n    return [er, null];\n  }\n};\nclass UnpackSync extends Unpack {\n  [MAKEFS](er, entry) {\n    return super[MAKEFS](er, entry, () => {});\n  }\n  [CHECKFS](entry) {\n    this[PRUNECACHE](entry);\n    if (!this[CHECKED_CWD]) {\n      const er = this[MKDIR](this.cwd, this.dmode);\n      if (er) {\n        return this[ONERROR](er, entry);\n      }\n      this[CHECKED_CWD] = true;\n    }\n\n    // don't bother to make the parent if the current entry is the cwd,\n    // we've already checked it.\n    if (entry.absolute !== this.cwd) {\n      const parent = normPath(path.dirname(entry.absolute));\n      if (parent !== this.cwd) {\n        const mkParent = this[MKDIR](parent, this.dmode);\n        if (mkParent) {\n          return this[ONERROR](mkParent, entry);\n        }\n      }\n    }\n    const [lstatEr, st] = callSync(() => fs.lstatSync(entry.absolute));\n    if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n      return this[SKIP](entry);\n    }\n    if (lstatEr || this[ISREUSABLE](entry, st)) {\n      return this[MAKEFS](null, entry);\n    }\n    if (st.isDirectory()) {\n      if (entry.type === 'Directory') {\n        const needChmod = !this.noChmod && entry.mode && (st.mode & 0o7777) !== entry.mode;\n        const [er] = needChmod ? callSync(() => {\n          fs.chmodSync(entry.absolute, entry.mode);\n        }) : [];\n        return this[MAKEFS](er, entry);\n      }\n      // not a dir entry, have to remove it\n      const [er] = callSync(() => fs.rmdirSync(entry.absolute));\n      this[MAKEFS](er, entry);\n    }\n\n    // not a dir, and not reusable.\n    // don't remove if it's the cwd, since we want that error.\n    const [er] = entry.absolute === this.cwd ? [] : callSync(() => unlinkFileSync(entry.absolute));\n    this[MAKEFS](er, entry);\n  }\n  [FILE](entry, done) {\n    const mode = entry.mode & 0o7777 || this.fmode;\n    const oner = er => {\n      let closeError;\n      try {\n        fs.closeSync(fd);\n      } catch (e) {\n        closeError = e;\n      }\n      if (er || closeError) {\n        this[ONERROR](er || closeError, entry);\n      }\n      done();\n    };\n    let fd;\n    try {\n      fd = fs.openSync(entry.absolute, getFlag(entry.size), mode);\n    } catch (er) {\n      return oner(er);\n    }\n    const tx = this.transform ? this.transform(entry) || entry : entry;\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry));\n      entry.pipe(tx);\n    }\n    tx.on('data', chunk => {\n      try {\n        fs.writeSync(fd, chunk, 0, chunk.length);\n      } catch (er) {\n        oner(er);\n      }\n    });\n    tx.on('end', _ => {\n      let er = null;\n      // try both, falling futimes back to utimes\n      // if either fails, handle the first error\n      if (entry.mtime && !this.noMtime) {\n        const atime = entry.atime || new Date();\n        const mtime = entry.mtime;\n        try {\n          fs.futimesSync(fd, atime, mtime);\n        } catch (futimeser) {\n          try {\n            fs.utimesSync(entry.absolute, atime, mtime);\n          } catch (utimeser) {\n            er = futimeser;\n          }\n        }\n      }\n      if (this[DOCHOWN](entry)) {\n        const uid = this[UID](entry);\n        const gid = this[GID](entry);\n        try {\n          fs.fchownSync(fd, uid, gid);\n        } catch (fchowner) {\n          try {\n            fs.chownSync(entry.absolute, uid, gid);\n          } catch (chowner) {\n            er = er || fchowner;\n          }\n        }\n      }\n      oner(er);\n    });\n  }\n  [DIRECTORY](entry, done) {\n    const mode = entry.mode & 0o7777 || this.dmode;\n    const er = this[MKDIR](entry.absolute, mode);\n    if (er) {\n      this[ONERROR](er, entry);\n      done();\n      return;\n    }\n    if (entry.mtime && !this.noMtime) {\n      try {\n        fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime);\n      } catch (er) {}\n    }\n    if (this[DOCHOWN](entry)) {\n      try {\n        fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry));\n      } catch (er) {}\n    }\n    done();\n    entry.resume();\n  }\n  [MKDIR](dir, mode) {\n    try {\n      return mkdir.sync(normPath(dir), {\n        uid: this.uid,\n        gid: this.gid,\n        processUid: this.processUid,\n        processGid: this.processGid,\n        umask: this.processUmask,\n        preserve: this.preservePaths,\n        unlink: this.unlink,\n        cache: this.dirCache,\n        cwd: this.cwd,\n        mode: mode\n      });\n    } catch (er) {\n      return er;\n    }\n  }\n  [LINK](entry, linkpath, link, done) {\n    try {\n      fs[link + 'Sync'](linkpath, entry.absolute);\n      done();\n      entry.resume();\n    } catch (er) {\n      return this[ONERROR](er, entry);\n    }\n  }\n}\nUnpack.Sync = UnpackSync;\nmodule.exports = Unpack;","map":{"version":3,"names":["assert","require","Parser","fs","fsm","path","mkdir","wc","pathReservations","stripAbsolutePath","normPath","stripSlash","normalize","ONENTRY","Symbol","CHECKFS","CHECKFS2","PRUNECACHE","ISREUSABLE","MAKEFS","FILE","DIRECTORY","LINK","SYMLINK","HARDLINK","UNSUPPORTED","CHECKPATH","MKDIR","ONERROR","PENDING","PEND","UNPEND","ENDED","MAYBECLOSE","SKIP","DOCHOWN","UID","GID","CHECKED_CWD","crypto","getFlag","platform","process","env","TESTING_TAR_FAKE_PLATFORM","isWindows","unlinkFile","cb","unlink","name","randomBytes","toString","rename","er","unlinkFileSync","unlinkSync","renameSync","uint32","a","b","c","cacheKeyNormalize","toLowerCase","pruneCache","cache","abs","keys","pnorm","indexOf","delete","dropCache","key","Unpack","constructor","opt","ondone","_","reservations","transform","writable","readable","dirCache","Map","uid","gid","TypeError","preserveOwner","setOwner","undefined","getuid","processUid","processGid","getgid","forceChown","win32","newer","keep","noMtime","preservePaths","cwd","resolve","strip","processUmask","noChmod","umask","dmode","fmode","on","entry","warn","code","msg","data","recoverable","emit","parts","split","length","slice","join","type","linkparts","linkpath","p","includes","test","root","stripped","isAbsolute","absolute","resolvedPath","aRoot","parse","encode","pRoot","resume","equal","mode","dir","preserve","fullyDone","stream","WriteStream","flags","size","autoClose","fd","close","write","actions","done","mtime","atime","Date","futimes","utimes","er2","fchown","chown","tx","pipe","unsupported","st","isFile","nlink","paths","push","reserve","checkCwd","start","parent","dirname","afterMakeParent","lstat","lstatEr","isDirectory","needChmod","afterChmod","chmod","rmdir","link","callSync","fn","UnpackSync","mkParent","lstatSync","chmodSync","rmdirSync","oner","closeError","closeSync","e","openSync","chunk","writeSync","futimesSync","futimeser","utimesSync","utimeser","fchownSync","fchowner","chownSync","chowner","sync","Sync","module","exports"],"sources":["C:/Users/Ryan/Documents/school/fall 2023/cmpe 133/project/CookChad/frontend/node_modules/tar/lib/unpack.js"],"sourcesContent":["'use strict'\n\n// the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.\n// but the path reservations are required to avoid race conditions where\n// parallelized unpack ops may mess with one another, due to dependencies\n// (like a Link depending on its target) or destructive operations (like\n// clobbering an fs object to create one of a different type.)\n\nconst assert = require('assert')\nconst Parser = require('./parse.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\nconst mkdir = require('./mkdir.js')\nconst wc = require('./winchars.js')\nconst pathReservations = require('./path-reservations.js')\nconst stripAbsolutePath = require('./strip-absolute-path.js')\nconst normPath = require('./normalize-windows-path.js')\nconst stripSlash = require('./strip-trailing-slashes.js')\nconst normalize = require('./normalize-unicode.js')\n\nconst ONENTRY = Symbol('onEntry')\nconst CHECKFS = Symbol('checkFs')\nconst CHECKFS2 = Symbol('checkFs2')\nconst PRUNECACHE = Symbol('pruneCache')\nconst ISREUSABLE = Symbol('isReusable')\nconst MAKEFS = Symbol('makeFs')\nconst FILE = Symbol('file')\nconst DIRECTORY = Symbol('directory')\nconst LINK = Symbol('link')\nconst SYMLINK = Symbol('symlink')\nconst HARDLINK = Symbol('hardlink')\nconst UNSUPPORTED = Symbol('unsupported')\nconst CHECKPATH = Symbol('checkPath')\nconst MKDIR = Symbol('mkdir')\nconst ONERROR = Symbol('onError')\nconst PENDING = Symbol('pending')\nconst PEND = Symbol('pend')\nconst UNPEND = Symbol('unpend')\nconst ENDED = Symbol('ended')\nconst MAYBECLOSE = Symbol('maybeClose')\nconst SKIP = Symbol('skip')\nconst DOCHOWN = Symbol('doChown')\nconst UID = Symbol('uid')\nconst GID = Symbol('gid')\nconst CHECKED_CWD = Symbol('checkedCwd')\nconst crypto = require('crypto')\nconst getFlag = require('./get-write-flag.js')\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\nconst isWindows = platform === 'win32'\n\n// Unlinks on Windows are not atomic.\n//\n// This means that if you have a file entry, followed by another\n// file entry with an identical name, and you cannot re-use the file\n// (because it's a hardlink, or because unlink:true is set, or it's\n// Windows, which does not have useful nlink values), then the unlink\n// will be committed to the disk AFTER the new file has been written\n// over the old one, deleting the new file.\n//\n// To work around this, on Windows systems, we rename the file and then\n// delete the renamed file.  It's a sloppy kludge, but frankly, I do not\n// know of a better way to do this, given windows' non-atomic unlink\n// semantics.\n//\n// See: https://github.com/npm/node-tar/issues/183\n/* istanbul ignore next */\nconst unlinkFile = (path, cb) => {\n  if (!isWindows) {\n    return fs.unlink(path, cb)\n  }\n\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n  fs.rename(path, name, er => {\n    if (er) {\n      return cb(er)\n    }\n    fs.unlink(name, cb)\n  })\n}\n\n/* istanbul ignore next */\nconst unlinkFileSync = path => {\n  if (!isWindows) {\n    return fs.unlinkSync(path)\n  }\n\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n  fs.renameSync(path, name)\n  fs.unlinkSync(name)\n}\n\n// this.gid, entry.gid, this.processUid\nconst uint32 = (a, b, c) =>\n  a === a >>> 0 ? a\n  : b === b >>> 0 ? b\n  : c\n\n// clear the cache if it's a case-insensitive unicode-squashing match.\n// we can't know if the current file system is case-sensitive or supports\n// unicode fully, so we check for similarity on the maximally compatible\n// representation.  Err on the side of pruning, since all it's doing is\n// preventing lstats, and it's not the end of the world if we get a false\n// positive.\n// Note that on windows, we always drop the entire cache whenever a\n// symbolic link is encountered, because 8.3 filenames are impossible\n// to reason about, and collisions are hazards rather than just failures.\nconst cacheKeyNormalize = path => stripSlash(normPath(normalize(path)))\n  .toLowerCase()\n\nconst pruneCache = (cache, abs) => {\n  abs = cacheKeyNormalize(abs)\n  for (const path of cache.keys()) {\n    const pnorm = cacheKeyNormalize(path)\n    if (pnorm === abs || pnorm.indexOf(abs + '/') === 0) {\n      cache.delete(path)\n    }\n  }\n}\n\nconst dropCache = cache => {\n  for (const key of cache.keys()) {\n    cache.delete(key)\n  }\n}\n\nclass Unpack extends Parser {\n  constructor (opt) {\n    if (!opt) {\n      opt = {}\n    }\n\n    opt.ondone = _ => {\n      this[ENDED] = true\n      this[MAYBECLOSE]()\n    }\n\n    super(opt)\n\n    this[CHECKED_CWD] = false\n\n    this.reservations = pathReservations()\n\n    this.transform = typeof opt.transform === 'function' ? opt.transform : null\n\n    this.writable = true\n    this.readable = false\n\n    this[PENDING] = 0\n    this[ENDED] = false\n\n    this.dirCache = opt.dirCache || new Map()\n\n    if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {\n      // need both or neither\n      if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number') {\n        throw new TypeError('cannot set owner without number uid and gid')\n      }\n      if (opt.preserveOwner) {\n        throw new TypeError(\n          'cannot preserve owner in archive and also set owner explicitly')\n      }\n      this.uid = opt.uid\n      this.gid = opt.gid\n      this.setOwner = true\n    } else {\n      this.uid = null\n      this.gid = null\n      this.setOwner = false\n    }\n\n    // default true for root\n    if (opt.preserveOwner === undefined && typeof opt.uid !== 'number') {\n      this.preserveOwner = process.getuid && process.getuid() === 0\n    } else {\n      this.preserveOwner = !!opt.preserveOwner\n    }\n\n    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ?\n      process.getuid() : null\n    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ?\n      process.getgid() : null\n\n    // mostly just for testing, but useful in some cases.\n    // Forcibly trigger a chown on every entry, no matter what\n    this.forceChown = opt.forceChown === true\n\n    // turn ><?| in filenames into 0xf000-higher encoded forms\n    this.win32 = !!opt.win32 || isWindows\n\n    // do not unpack over files that are newer than what's in the archive\n    this.newer = !!opt.newer\n\n    // do not unpack over ANY files\n    this.keep = !!opt.keep\n\n    // do not set mtime/atime of extracted entries\n    this.noMtime = !!opt.noMtime\n\n    // allow .., absolute path entries, and unpacking through symlinks\n    // without this, warn and skip .., relativize absolutes, and error\n    // on symlinks in extraction path\n    this.preservePaths = !!opt.preservePaths\n\n    // unlink files and links before writing. This breaks existing hard\n    // links, and removes symlink directories rather than erroring\n    this.unlink = !!opt.unlink\n\n    this.cwd = normPath(path.resolve(opt.cwd || process.cwd()))\n    this.strip = +opt.strip || 0\n    // if we're not chmodding, then we don't need the process umask\n    this.processUmask = opt.noChmod ? 0 : process.umask()\n    this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask\n\n    // default mode for dirs created as parents\n    this.dmode = opt.dmode || (0o0777 & (~this.umask))\n    this.fmode = opt.fmode || (0o0666 & (~this.umask))\n\n    this.on('entry', entry => this[ONENTRY](entry))\n  }\n\n  // a bad or damaged archive is a warning for Parser, but an error\n  // when extracting.  Mark those errors as unrecoverable, because\n  // the Unpack contract cannot be met.\n  warn (code, msg, data = {}) {\n    if (code === 'TAR_BAD_ARCHIVE' || code === 'TAR_ABORT') {\n      data.recoverable = false\n    }\n    return super.warn(code, msg, data)\n  }\n\n  [MAYBECLOSE] () {\n    if (this[ENDED] && this[PENDING] === 0) {\n      this.emit('prefinish')\n      this.emit('finish')\n      this.emit('end')\n    }\n  }\n\n  [CHECKPATH] (entry) {\n    if (this.strip) {\n      const parts = normPath(entry.path).split('/')\n      if (parts.length < this.strip) {\n        return false\n      }\n      entry.path = parts.slice(this.strip).join('/')\n\n      if (entry.type === 'Link') {\n        const linkparts = normPath(entry.linkpath).split('/')\n        if (linkparts.length >= this.strip) {\n          entry.linkpath = linkparts.slice(this.strip).join('/')\n        } else {\n          return false\n        }\n      }\n    }\n\n    if (!this.preservePaths) {\n      const p = normPath(entry.path)\n      const parts = p.split('/')\n      if (parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(parts[0])) {\n        this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {\n          entry,\n          path: p,\n        })\n        return false\n      }\n\n      // strip off the root\n      const [root, stripped] = stripAbsolutePath(p)\n      if (root) {\n        entry.path = stripped\n        this.warn('TAR_ENTRY_INFO', `stripping ${root} from absolute path`, {\n          entry,\n          path: p,\n        })\n      }\n    }\n\n    if (path.isAbsolute(entry.path)) {\n      entry.absolute = normPath(path.resolve(entry.path))\n    } else {\n      entry.absolute = normPath(path.resolve(this.cwd, entry.path))\n    }\n\n    // if we somehow ended up with a path that escapes the cwd, and we are\n    // not in preservePaths mode, then something is fishy!  This should have\n    // been prevented above, so ignore this for coverage.\n    /* istanbul ignore if - defense in depth */\n    if (!this.preservePaths &&\n        entry.absolute.indexOf(this.cwd + '/') !== 0 &&\n        entry.absolute !== this.cwd) {\n      this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {\n        entry,\n        path: normPath(entry.path),\n        resolvedPath: entry.absolute,\n        cwd: this.cwd,\n      })\n      return false\n    }\n\n    // an archive can set properties on the extraction directory, but it\n    // may not replace the cwd with a different kind of thing entirely.\n    if (entry.absolute === this.cwd &&\n        entry.type !== 'Directory' &&\n        entry.type !== 'GNUDumpDir') {\n      return false\n    }\n\n    // only encode : chars that aren't drive letter indicators\n    if (this.win32) {\n      const { root: aRoot } = path.win32.parse(entry.absolute)\n      entry.absolute = aRoot + wc.encode(entry.absolute.slice(aRoot.length))\n      const { root: pRoot } = path.win32.parse(entry.path)\n      entry.path = pRoot + wc.encode(entry.path.slice(pRoot.length))\n    }\n\n    return true\n  }\n\n  [ONENTRY] (entry) {\n    if (!this[CHECKPATH](entry)) {\n      return entry.resume()\n    }\n\n    assert.equal(typeof entry.absolute, 'string')\n\n    switch (entry.type) {\n      case 'Directory':\n      case 'GNUDumpDir':\n        if (entry.mode) {\n          entry.mode = entry.mode | 0o700\n        }\n\n      // eslint-disable-next-line no-fallthrough\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n      case 'Link':\n      case 'SymbolicLink':\n        return this[CHECKFS](entry)\n\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'FIFO':\n      default:\n        return this[UNSUPPORTED](entry)\n    }\n  }\n\n  [ONERROR] (er, entry) {\n    // Cwd has to exist, or else nothing works. That's serious.\n    // Other errors are warnings, which raise the error in strict\n    // mode, but otherwise continue on.\n    if (er.name === 'CwdError') {\n      this.emit('error', er)\n    } else {\n      this.warn('TAR_ENTRY_ERROR', er, { entry })\n      this[UNPEND]()\n      entry.resume()\n    }\n  }\n\n  [MKDIR] (dir, mode, cb) {\n    mkdir(normPath(dir), {\n      uid: this.uid,\n      gid: this.gid,\n      processUid: this.processUid,\n      processGid: this.processGid,\n      umask: this.processUmask,\n      preserve: this.preservePaths,\n      unlink: this.unlink,\n      cache: this.dirCache,\n      cwd: this.cwd,\n      mode: mode,\n      noChmod: this.noChmod,\n    }, cb)\n  }\n\n  [DOCHOWN] (entry) {\n    // in preserve owner mode, chown if the entry doesn't match process\n    // in set owner mode, chown if setting doesn't match process\n    return this.forceChown ||\n      this.preserveOwner &&\n      (typeof entry.uid === 'number' && entry.uid !== this.processUid ||\n        typeof entry.gid === 'number' && entry.gid !== this.processGid)\n      ||\n      (typeof this.uid === 'number' && this.uid !== this.processUid ||\n        typeof this.gid === 'number' && this.gid !== this.processGid)\n  }\n\n  [UID] (entry) {\n    return uint32(this.uid, entry.uid, this.processUid)\n  }\n\n  [GID] (entry) {\n    return uint32(this.gid, entry.gid, this.processGid)\n  }\n\n  [FILE] (entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.fmode\n    const stream = new fsm.WriteStream(entry.absolute, {\n      flags: getFlag(entry.size),\n      mode: mode,\n      autoClose: false,\n    })\n    stream.on('error', er => {\n      if (stream.fd) {\n        fs.close(stream.fd, () => {})\n      }\n\n      // flush all the data out so that we aren't left hanging\n      // if the error wasn't actually fatal.  otherwise the parse\n      // is blocked, and we never proceed.\n      stream.write = () => true\n      this[ONERROR](er, entry)\n      fullyDone()\n    })\n\n    let actions = 1\n    const done = er => {\n      if (er) {\n        /* istanbul ignore else - we should always have a fd by now */\n        if (stream.fd) {\n          fs.close(stream.fd, () => {})\n        }\n\n        this[ONERROR](er, entry)\n        fullyDone()\n        return\n      }\n\n      if (--actions === 0) {\n        fs.close(stream.fd, er => {\n          if (er) {\n            this[ONERROR](er, entry)\n          } else {\n            this[UNPEND]()\n          }\n          fullyDone()\n        })\n      }\n    }\n\n    stream.on('finish', _ => {\n      // if futimes fails, try utimes\n      // if utimes fails, fail with the original error\n      // same for fchown/chown\n      const abs = entry.absolute\n      const fd = stream.fd\n\n      if (entry.mtime && !this.noMtime) {\n        actions++\n        const atime = entry.atime || new Date()\n        const mtime = entry.mtime\n        fs.futimes(fd, atime, mtime, er =>\n          er ? fs.utimes(abs, atime, mtime, er2 => done(er2 && er))\n          : done())\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++\n        const uid = this[UID](entry)\n        const gid = this[GID](entry)\n        fs.fchown(fd, uid, gid, er =>\n          er ? fs.chown(abs, uid, gid, er2 => done(er2 && er))\n          : done())\n      }\n\n      done()\n    })\n\n    const tx = this.transform ? this.transform(entry) || entry : entry\n    if (tx !== entry) {\n      tx.on('error', er => {\n        this[ONERROR](er, entry)\n        fullyDone()\n      })\n      entry.pipe(tx)\n    }\n    tx.pipe(stream)\n  }\n\n  [DIRECTORY] (entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.dmode\n    this[MKDIR](entry.absolute, mode, er => {\n      if (er) {\n        this[ONERROR](er, entry)\n        fullyDone()\n        return\n      }\n\n      let actions = 1\n      const done = _ => {\n        if (--actions === 0) {\n          fullyDone()\n          this[UNPEND]()\n          entry.resume()\n        }\n      }\n\n      if (entry.mtime && !this.noMtime) {\n        actions++\n        fs.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done)\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++\n        fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done)\n      }\n\n      done()\n    })\n  }\n\n  [UNSUPPORTED] (entry) {\n    entry.unsupported = true\n    this.warn('TAR_ENTRY_UNSUPPORTED',\n      `unsupported entry type: ${entry.type}`, { entry })\n    entry.resume()\n  }\n\n  [SYMLINK] (entry, done) {\n    this[LINK](entry, entry.linkpath, 'symlink', done)\n  }\n\n  [HARDLINK] (entry, done) {\n    const linkpath = normPath(path.resolve(this.cwd, entry.linkpath))\n    this[LINK](entry, linkpath, 'link', done)\n  }\n\n  [PEND] () {\n    this[PENDING]++\n  }\n\n  [UNPEND] () {\n    this[PENDING]--\n    this[MAYBECLOSE]()\n  }\n\n  [SKIP] (entry) {\n    this[UNPEND]()\n    entry.resume()\n  }\n\n  // Check if we can reuse an existing filesystem entry safely and\n  // overwrite it, rather than unlinking and recreating\n  // Windows doesn't report a useful nlink, so we just never reuse entries\n  [ISREUSABLE] (entry, st) {\n    return entry.type === 'File' &&\n      !this.unlink &&\n      st.isFile() &&\n      st.nlink <= 1 &&\n      !isWindows\n  }\n\n  // check if a thing is there, and if so, try to clobber it\n  [CHECKFS] (entry) {\n    this[PEND]()\n    const paths = [entry.path]\n    if (entry.linkpath) {\n      paths.push(entry.linkpath)\n    }\n    this.reservations.reserve(paths, done => this[CHECKFS2](entry, done))\n  }\n\n  [PRUNECACHE] (entry) {\n    // if we are not creating a directory, and the path is in the dirCache,\n    // then that means we are about to delete the directory we created\n    // previously, and it is no longer going to be a directory, and neither\n    // is any of its children.\n    // If a symbolic link is encountered, all bets are off.  There is no\n    // reasonable way to sanitize the cache in such a way we will be able to\n    // avoid having filesystem collisions.  If this happens with a non-symlink\n    // entry, it'll just fail to unpack, but a symlink to a directory, using an\n    // 8.3 shortname or certain unicode attacks, can evade detection and lead\n    // to arbitrary writes to anywhere on the system.\n    if (entry.type === 'SymbolicLink') {\n      dropCache(this.dirCache)\n    } else if (entry.type !== 'Directory') {\n      pruneCache(this.dirCache, entry.absolute)\n    }\n  }\n\n  [CHECKFS2] (entry, fullyDone) {\n    this[PRUNECACHE](entry)\n\n    const done = er => {\n      this[PRUNECACHE](entry)\n      fullyDone(er)\n    }\n\n    const checkCwd = () => {\n      this[MKDIR](this.cwd, this.dmode, er => {\n        if (er) {\n          this[ONERROR](er, entry)\n          done()\n          return\n        }\n        this[CHECKED_CWD] = true\n        start()\n      })\n    }\n\n    const start = () => {\n      if (entry.absolute !== this.cwd) {\n        const parent = normPath(path.dirname(entry.absolute))\n        if (parent !== this.cwd) {\n          return this[MKDIR](parent, this.dmode, er => {\n            if (er) {\n              this[ONERROR](er, entry)\n              done()\n              return\n            }\n            afterMakeParent()\n          })\n        }\n      }\n      afterMakeParent()\n    }\n\n    const afterMakeParent = () => {\n      fs.lstat(entry.absolute, (lstatEr, st) => {\n        if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n          this[SKIP](entry)\n          done()\n          return\n        }\n        if (lstatEr || this[ISREUSABLE](entry, st)) {\n          return this[MAKEFS](null, entry, done)\n        }\n\n        if (st.isDirectory()) {\n          if (entry.type === 'Directory') {\n            const needChmod = !this.noChmod &&\n              entry.mode &&\n              (st.mode & 0o7777) !== entry.mode\n            const afterChmod = er => this[MAKEFS](er, entry, done)\n            if (!needChmod) {\n              return afterChmod()\n            }\n            return fs.chmod(entry.absolute, entry.mode, afterChmod)\n          }\n          // Not a dir entry, have to remove it.\n          // NB: the only way to end up with an entry that is the cwd\n          // itself, in such a way that == does not detect, is a\n          // tricky windows absolute path with UNC or 8.3 parts (and\n          // preservePaths:true, or else it will have been stripped).\n          // In that case, the user has opted out of path protections\n          // explicitly, so if they blow away the cwd, c'est la vie.\n          if (entry.absolute !== this.cwd) {\n            return fs.rmdir(entry.absolute, er =>\n              this[MAKEFS](er, entry, done))\n          }\n        }\n\n        // not a dir, and not reusable\n        // don't remove if the cwd, we want that error\n        if (entry.absolute === this.cwd) {\n          return this[MAKEFS](null, entry, done)\n        }\n\n        unlinkFile(entry.absolute, er =>\n          this[MAKEFS](er, entry, done))\n      })\n    }\n\n    if (this[CHECKED_CWD]) {\n      start()\n    } else {\n      checkCwd()\n    }\n  }\n\n  [MAKEFS] (er, entry, done) {\n    if (er) {\n      this[ONERROR](er, entry)\n      done()\n      return\n    }\n\n    switch (entry.type) {\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n        return this[FILE](entry, done)\n\n      case 'Link':\n        return this[HARDLINK](entry, done)\n\n      case 'SymbolicLink':\n        return this[SYMLINK](entry, done)\n\n      case 'Directory':\n      case 'GNUDumpDir':\n        return this[DIRECTORY](entry, done)\n    }\n  }\n\n  [LINK] (entry, linkpath, link, done) {\n    // XXX: get the type ('symlink' or 'junction') for windows\n    fs[link](linkpath, entry.absolute, er => {\n      if (er) {\n        this[ONERROR](er, entry)\n      } else {\n        this[UNPEND]()\n        entry.resume()\n      }\n      done()\n    })\n  }\n}\n\nconst callSync = fn => {\n  try {\n    return [null, fn()]\n  } catch (er) {\n    return [er, null]\n  }\n}\nclass UnpackSync extends Unpack {\n  [MAKEFS] (er, entry) {\n    return super[MAKEFS](er, entry, () => {})\n  }\n\n  [CHECKFS] (entry) {\n    this[PRUNECACHE](entry)\n\n    if (!this[CHECKED_CWD]) {\n      const er = this[MKDIR](this.cwd, this.dmode)\n      if (er) {\n        return this[ONERROR](er, entry)\n      }\n      this[CHECKED_CWD] = true\n    }\n\n    // don't bother to make the parent if the current entry is the cwd,\n    // we've already checked it.\n    if (entry.absolute !== this.cwd) {\n      const parent = normPath(path.dirname(entry.absolute))\n      if (parent !== this.cwd) {\n        const mkParent = this[MKDIR](parent, this.dmode)\n        if (mkParent) {\n          return this[ONERROR](mkParent, entry)\n        }\n      }\n    }\n\n    const [lstatEr, st] = callSync(() => fs.lstatSync(entry.absolute))\n    if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n      return this[SKIP](entry)\n    }\n\n    if (lstatEr || this[ISREUSABLE](entry, st)) {\n      return this[MAKEFS](null, entry)\n    }\n\n    if (st.isDirectory()) {\n      if (entry.type === 'Directory') {\n        const needChmod = !this.noChmod &&\n          entry.mode &&\n          (st.mode & 0o7777) !== entry.mode\n        const [er] = needChmod ? callSync(() => {\n          fs.chmodSync(entry.absolute, entry.mode)\n        }) : []\n        return this[MAKEFS](er, entry)\n      }\n      // not a dir entry, have to remove it\n      const [er] = callSync(() => fs.rmdirSync(entry.absolute))\n      this[MAKEFS](er, entry)\n    }\n\n    // not a dir, and not reusable.\n    // don't remove if it's the cwd, since we want that error.\n    const [er] = entry.absolute === this.cwd ? []\n      : callSync(() => unlinkFileSync(entry.absolute))\n    this[MAKEFS](er, entry)\n  }\n\n  [FILE] (entry, done) {\n    const mode = entry.mode & 0o7777 || this.fmode\n\n    const oner = er => {\n      let closeError\n      try {\n        fs.closeSync(fd)\n      } catch (e) {\n        closeError = e\n      }\n      if (er || closeError) {\n        this[ONERROR](er || closeError, entry)\n      }\n      done()\n    }\n\n    let fd\n    try {\n      fd = fs.openSync(entry.absolute, getFlag(entry.size), mode)\n    } catch (er) {\n      return oner(er)\n    }\n    const tx = this.transform ? this.transform(entry) || entry : entry\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry))\n      entry.pipe(tx)\n    }\n\n    tx.on('data', chunk => {\n      try {\n        fs.writeSync(fd, chunk, 0, chunk.length)\n      } catch (er) {\n        oner(er)\n      }\n    })\n\n    tx.on('end', _ => {\n      let er = null\n      // try both, falling futimes back to utimes\n      // if either fails, handle the first error\n      if (entry.mtime && !this.noMtime) {\n        const atime = entry.atime || new Date()\n        const mtime = entry.mtime\n        try {\n          fs.futimesSync(fd, atime, mtime)\n        } catch (futimeser) {\n          try {\n            fs.utimesSync(entry.absolute, atime, mtime)\n          } catch (utimeser) {\n            er = futimeser\n          }\n        }\n      }\n\n      if (this[DOCHOWN](entry)) {\n        const uid = this[UID](entry)\n        const gid = this[GID](entry)\n\n        try {\n          fs.fchownSync(fd, uid, gid)\n        } catch (fchowner) {\n          try {\n            fs.chownSync(entry.absolute, uid, gid)\n          } catch (chowner) {\n            er = er || fchowner\n          }\n        }\n      }\n\n      oner(er)\n    })\n  }\n\n  [DIRECTORY] (entry, done) {\n    const mode = entry.mode & 0o7777 || this.dmode\n    const er = this[MKDIR](entry.absolute, mode)\n    if (er) {\n      this[ONERROR](er, entry)\n      done()\n      return\n    }\n    if (entry.mtime && !this.noMtime) {\n      try {\n        fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime)\n      } catch (er) {}\n    }\n    if (this[DOCHOWN](entry)) {\n      try {\n        fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry))\n      } catch (er) {}\n    }\n    done()\n    entry.resume()\n  }\n\n  [MKDIR] (dir, mode) {\n    try {\n      return mkdir.sync(normPath(dir), {\n        uid: this.uid,\n        gid: this.gid,\n        processUid: this.processUid,\n        processGid: this.processGid,\n        umask: this.processUmask,\n        preserve: this.preservePaths,\n        unlink: this.unlink,\n        cache: this.dirCache,\n        cwd: this.cwd,\n        mode: mode,\n      })\n    } catch (er) {\n      return er\n    }\n  }\n\n  [LINK] (entry, linkpath, link, done) {\n    try {\n      fs[link + 'Sync'](linkpath, entry.absolute)\n      done()\n      entry.resume()\n    } catch (er) {\n      return this[ONERROR](er, entry)\n    }\n  }\n}\n\nUnpack.Sync = UnpackSync\nmodule.exports = Unpack\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,MAAM,GAAGD,OAAO,CAAC,YAAY,CAAC;AACpC,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMG,GAAG,GAAGH,OAAO,CAAC,aAAa,CAAC;AAClC,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMK,KAAK,GAAGL,OAAO,CAAC,YAAY,CAAC;AACnC,MAAMM,EAAE,GAAGN,OAAO,CAAC,eAAe,CAAC;AACnC,MAAMO,gBAAgB,GAAGP,OAAO,CAAC,wBAAwB,CAAC;AAC1D,MAAMQ,iBAAiB,GAAGR,OAAO,CAAC,0BAA0B,CAAC;AAC7D,MAAMS,QAAQ,GAAGT,OAAO,CAAC,6BAA6B,CAAC;AACvD,MAAMU,UAAU,GAAGV,OAAO,CAAC,6BAA6B,CAAC;AACzD,MAAMW,SAAS,GAAGX,OAAO,CAAC,wBAAwB,CAAC;AAEnD,MAAMY,OAAO,GAAGC,MAAM,CAAC,SAAS,CAAC;AACjC,MAAMC,OAAO,GAAGD,MAAM,CAAC,SAAS,CAAC;AACjC,MAAME,QAAQ,GAAGF,MAAM,CAAC,UAAU,CAAC;AACnC,MAAMG,UAAU,GAAGH,MAAM,CAAC,YAAY,CAAC;AACvC,MAAMI,UAAU,GAAGJ,MAAM,CAAC,YAAY,CAAC;AACvC,MAAMK,MAAM,GAAGL,MAAM,CAAC,QAAQ,CAAC;AAC/B,MAAMM,IAAI,GAAGN,MAAM,CAAC,MAAM,CAAC;AAC3B,MAAMO,SAAS,GAAGP,MAAM,CAAC,WAAW,CAAC;AACrC,MAAMQ,IAAI,GAAGR,MAAM,CAAC,MAAM,CAAC;AAC3B,MAAMS,OAAO,GAAGT,MAAM,CAAC,SAAS,CAAC;AACjC,MAAMU,QAAQ,GAAGV,MAAM,CAAC,UAAU,CAAC;AACnC,MAAMW,WAAW,GAAGX,MAAM,CAAC,aAAa,CAAC;AACzC,MAAMY,SAAS,GAAGZ,MAAM,CAAC,WAAW,CAAC;AACrC,MAAMa,KAAK,GAAGb,MAAM,CAAC,OAAO,CAAC;AAC7B,MAAMc,OAAO,GAAGd,MAAM,CAAC,SAAS,CAAC;AACjC,MAAMe,OAAO,GAAGf,MAAM,CAAC,SAAS,CAAC;AACjC,MAAMgB,IAAI,GAAGhB,MAAM,CAAC,MAAM,CAAC;AAC3B,MAAMiB,MAAM,GAAGjB,MAAM,CAAC,QAAQ,CAAC;AAC/B,MAAMkB,KAAK,GAAGlB,MAAM,CAAC,OAAO,CAAC;AAC7B,MAAMmB,UAAU,GAAGnB,MAAM,CAAC,YAAY,CAAC;AACvC,MAAMoB,IAAI,GAAGpB,MAAM,CAAC,MAAM,CAAC;AAC3B,MAAMqB,OAAO,GAAGrB,MAAM,CAAC,SAAS,CAAC;AACjC,MAAMsB,GAAG,GAAGtB,MAAM,CAAC,KAAK,CAAC;AACzB,MAAMuB,GAAG,GAAGvB,MAAM,CAAC,KAAK,CAAC;AACzB,MAAMwB,WAAW,GAAGxB,MAAM,CAAC,YAAY,CAAC;AACxC,MAAMyB,MAAM,GAAGtC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMuC,OAAO,GAAGvC,OAAO,CAAC,qBAAqB,CAAC;AAC9C,MAAMwC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB,IAAIF,OAAO,CAACD,QAAQ;AAC1E,MAAMI,SAAS,GAAGJ,QAAQ,KAAK,OAAO;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,UAAU,GAAGA,CAACzC,IAAI,EAAE0C,EAAE,KAAK;EAC/B,IAAI,CAACF,SAAS,EAAE;IACd,OAAO1C,EAAE,CAAC6C,MAAM,CAAC3C,IAAI,EAAE0C,EAAE,CAAC;EAC5B;EAEA,MAAME,IAAI,GAAG5C,IAAI,GAAG,UAAU,GAAGkC,MAAM,CAACW,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;EACvEhD,EAAE,CAACiD,MAAM,CAAC/C,IAAI,EAAE4C,IAAI,EAAEI,EAAE,IAAI;IAC1B,IAAIA,EAAE,EAAE;MACN,OAAON,EAAE,CAACM,EAAE,CAAC;IACf;IACAlD,EAAE,CAAC6C,MAAM,CAACC,IAAI,EAAEF,EAAE,CAAC;EACrB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMO,cAAc,GAAGjD,IAAI,IAAI;EAC7B,IAAI,CAACwC,SAAS,EAAE;IACd,OAAO1C,EAAE,CAACoD,UAAU,CAAClD,IAAI,CAAC;EAC5B;EAEA,MAAM4C,IAAI,GAAG5C,IAAI,GAAG,UAAU,GAAGkC,MAAM,CAACW,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;EACvEhD,EAAE,CAACqD,UAAU,CAACnD,IAAI,EAAE4C,IAAI,CAAC;EACzB9C,EAAE,CAACoD,UAAU,CAACN,IAAI,CAAC;AACrB,CAAC;;AAED;AACA,MAAMQ,MAAM,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KACrBF,CAAC,KAAKA,CAAC,KAAK,CAAC,GAAGA,CAAC,GACfC,CAAC,KAAKA,CAAC,KAAK,CAAC,GAAGA,CAAC,GACjBC,CAAC;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGxD,IAAI,IAAIM,UAAU,CAACD,QAAQ,CAACE,SAAS,CAACP,IAAI,CAAC,CAAC,CAAC,CACpEyD,WAAW,CAAC,CAAC;AAEhB,MAAMC,UAAU,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAK;EACjCA,GAAG,GAAGJ,iBAAiB,CAACI,GAAG,CAAC;EAC5B,KAAK,MAAM5D,IAAI,IAAI2D,KAAK,CAACE,IAAI,CAAC,CAAC,EAAE;IAC/B,MAAMC,KAAK,GAAGN,iBAAiB,CAACxD,IAAI,CAAC;IACrC,IAAI8D,KAAK,KAAKF,GAAG,IAAIE,KAAK,CAACC,OAAO,CAACH,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;MACnDD,KAAK,CAACK,MAAM,CAAChE,IAAI,CAAC;IACpB;EACF;AACF,CAAC;AAED,MAAMiE,SAAS,GAAGN,KAAK,IAAI;EACzB,KAAK,MAAMO,GAAG,IAAIP,KAAK,CAACE,IAAI,CAAC,CAAC,EAAE;IAC9BF,KAAK,CAACK,MAAM,CAACE,GAAG,CAAC;EACnB;AACF,CAAC;AAED,MAAMC,MAAM,SAAStE,MAAM,CAAC;EAC1BuE,WAAWA,CAAEC,GAAG,EAAE;IAChB,IAAI,CAACA,GAAG,EAAE;MACRA,GAAG,GAAG,CAAC,CAAC;IACV;IAEAA,GAAG,CAACC,MAAM,GAAGC,CAAC,IAAI;MAChB,IAAI,CAAC5C,KAAK,CAAC,GAAG,IAAI;MAClB,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC;IACpB,CAAC;IAED,KAAK,CAACyC,GAAG,CAAC;IAEV,IAAI,CAACpC,WAAW,CAAC,GAAG,KAAK;IAEzB,IAAI,CAACuC,YAAY,GAAGrE,gBAAgB,CAAC,CAAC;IAEtC,IAAI,CAACsE,SAAS,GAAG,OAAOJ,GAAG,CAACI,SAAS,KAAK,UAAU,GAAGJ,GAAG,CAACI,SAAS,GAAG,IAAI;IAE3E,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,QAAQ,GAAG,KAAK;IAErB,IAAI,CAACnD,OAAO,CAAC,GAAG,CAAC;IACjB,IAAI,CAACG,KAAK,CAAC,GAAG,KAAK;IAEnB,IAAI,CAACiD,QAAQ,GAAGP,GAAG,CAACO,QAAQ,IAAI,IAAIC,GAAG,CAAC,CAAC;IAEzC,IAAI,OAAOR,GAAG,CAACS,GAAG,KAAK,QAAQ,IAAI,OAAOT,GAAG,CAACU,GAAG,KAAK,QAAQ,EAAE;MAC9D;MACA,IAAI,OAAOV,GAAG,CAACS,GAAG,KAAK,QAAQ,IAAI,OAAOT,GAAG,CAACU,GAAG,KAAK,QAAQ,EAAE;QAC9D,MAAM,IAAIC,SAAS,CAAC,6CAA6C,CAAC;MACpE;MACA,IAAIX,GAAG,CAACY,aAAa,EAAE;QACrB,MAAM,IAAID,SAAS,CACjB,gEAAgE,CAAC;MACrE;MACA,IAAI,CAACF,GAAG,GAAGT,GAAG,CAACS,GAAG;MAClB,IAAI,CAACC,GAAG,GAAGV,GAAG,CAACU,GAAG;MAClB,IAAI,CAACG,QAAQ,GAAG,IAAI;IACtB,CAAC,MAAM;MACL,IAAI,CAACJ,GAAG,GAAG,IAAI;MACf,IAAI,CAACC,GAAG,GAAG,IAAI;MACf,IAAI,CAACG,QAAQ,GAAG,KAAK;IACvB;;IAEA;IACA,IAAIb,GAAG,CAACY,aAAa,KAAKE,SAAS,IAAI,OAAOd,GAAG,CAACS,GAAG,KAAK,QAAQ,EAAE;MAClE,IAAI,CAACG,aAAa,GAAG5C,OAAO,CAAC+C,MAAM,IAAI/C,OAAO,CAAC+C,MAAM,CAAC,CAAC,KAAK,CAAC;IAC/D,CAAC,MAAM;MACL,IAAI,CAACH,aAAa,GAAG,CAAC,CAACZ,GAAG,CAACY,aAAa;IAC1C;IAEA,IAAI,CAACI,UAAU,GAAG,CAAC,IAAI,CAACJ,aAAa,IAAI,IAAI,CAACC,QAAQ,KAAK7C,OAAO,CAAC+C,MAAM,GACvE/C,OAAO,CAAC+C,MAAM,CAAC,CAAC,GAAG,IAAI;IACzB,IAAI,CAACE,UAAU,GAAG,CAAC,IAAI,CAACL,aAAa,IAAI,IAAI,CAACC,QAAQ,KAAK7C,OAAO,CAACkD,MAAM,GACvElD,OAAO,CAACkD,MAAM,CAAC,CAAC,GAAG,IAAI;;IAEzB;IACA;IACA,IAAI,CAACC,UAAU,GAAGnB,GAAG,CAACmB,UAAU,KAAK,IAAI;;IAEzC;IACA,IAAI,CAACC,KAAK,GAAG,CAAC,CAACpB,GAAG,CAACoB,KAAK,IAAIjD,SAAS;;IAErC;IACA,IAAI,CAACkD,KAAK,GAAG,CAAC,CAACrB,GAAG,CAACqB,KAAK;;IAExB;IACA,IAAI,CAACC,IAAI,GAAG,CAAC,CAACtB,GAAG,CAACsB,IAAI;;IAEtB;IACA,IAAI,CAACC,OAAO,GAAG,CAAC,CAACvB,GAAG,CAACuB,OAAO;;IAE5B;IACA;IACA;IACA,IAAI,CAACC,aAAa,GAAG,CAAC,CAACxB,GAAG,CAACwB,aAAa;;IAExC;IACA;IACA,IAAI,CAAClD,MAAM,GAAG,CAAC,CAAC0B,GAAG,CAAC1B,MAAM;IAE1B,IAAI,CAACmD,GAAG,GAAGzF,QAAQ,CAACL,IAAI,CAAC+F,OAAO,CAAC1B,GAAG,CAACyB,GAAG,IAAIzD,OAAO,CAACyD,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAACE,KAAK,GAAG,CAAC3B,GAAG,CAAC2B,KAAK,IAAI,CAAC;IAC5B;IACA,IAAI,CAACC,YAAY,GAAG5B,GAAG,CAAC6B,OAAO,GAAG,CAAC,GAAG7D,OAAO,CAAC8D,KAAK,CAAC,CAAC;IACrD,IAAI,CAACA,KAAK,GAAG,OAAO9B,GAAG,CAAC8B,KAAK,KAAK,QAAQ,GAAG9B,GAAG,CAAC8B,KAAK,GAAG,IAAI,CAACF,YAAY;;IAE1E;IACA,IAAI,CAACG,KAAK,GAAG/B,GAAG,CAAC+B,KAAK,IAAK,MAAM,GAAI,CAAC,IAAI,CAACD,KAAO;IAClD,IAAI,CAACE,KAAK,GAAGhC,GAAG,CAACgC,KAAK,IAAK,MAAM,GAAI,CAAC,IAAI,CAACF,KAAO;IAElD,IAAI,CAACG,EAAE,CAAC,OAAO,EAAEC,KAAK,IAAI,IAAI,CAAC/F,OAAO,CAAC,CAAC+F,KAAK,CAAC,CAAC;EACjD;;EAEA;EACA;EACA;EACAC,IAAIA,CAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;IAC1B,IAAIF,IAAI,KAAK,iBAAiB,IAAIA,IAAI,KAAK,WAAW,EAAE;MACtDE,IAAI,CAACC,WAAW,GAAG,KAAK;IAC1B;IACA,OAAO,KAAK,CAACJ,IAAI,CAACC,IAAI,EAAEC,GAAG,EAAEC,IAAI,CAAC;EACpC;EAEA,CAAC/E,UAAU,IAAK;IACd,IAAI,IAAI,CAACD,KAAK,CAAC,IAAI,IAAI,CAACH,OAAO,CAAC,KAAK,CAAC,EAAE;MACtC,IAAI,CAACqF,IAAI,CAAC,WAAW,CAAC;MACtB,IAAI,CAACA,IAAI,CAAC,QAAQ,CAAC;MACnB,IAAI,CAACA,IAAI,CAAC,KAAK,CAAC;IAClB;EACF;EAEA,CAACxF,SAAS,EAAGkF,KAAK,EAAE;IAClB,IAAI,IAAI,CAACP,KAAK,EAAE;MACd,MAAMc,KAAK,GAAGzG,QAAQ,CAACkG,KAAK,CAACvG,IAAI,CAAC,CAAC+G,KAAK,CAAC,GAAG,CAAC;MAC7C,IAAID,KAAK,CAACE,MAAM,GAAG,IAAI,CAAChB,KAAK,EAAE;QAC7B,OAAO,KAAK;MACd;MACAO,KAAK,CAACvG,IAAI,GAAG8G,KAAK,CAACG,KAAK,CAAC,IAAI,CAACjB,KAAK,CAAC,CAACkB,IAAI,CAAC,GAAG,CAAC;MAE9C,IAAIX,KAAK,CAACY,IAAI,KAAK,MAAM,EAAE;QACzB,MAAMC,SAAS,GAAG/G,QAAQ,CAACkG,KAAK,CAACc,QAAQ,CAAC,CAACN,KAAK,CAAC,GAAG,CAAC;QACrD,IAAIK,SAAS,CAACJ,MAAM,IAAI,IAAI,CAAChB,KAAK,EAAE;UAClCO,KAAK,CAACc,QAAQ,GAAGD,SAAS,CAACH,KAAK,CAAC,IAAI,CAACjB,KAAK,CAAC,CAACkB,IAAI,CAAC,GAAG,CAAC;QACxD,CAAC,MAAM;UACL,OAAO,KAAK;QACd;MACF;IACF;IAEA,IAAI,CAAC,IAAI,CAACrB,aAAa,EAAE;MACvB,MAAMyB,CAAC,GAAGjH,QAAQ,CAACkG,KAAK,CAACvG,IAAI,CAAC;MAC9B,MAAM8G,KAAK,GAAGQ,CAAC,CAACP,KAAK,CAAC,GAAG,CAAC;MAC1B,IAAID,KAAK,CAACS,QAAQ,CAAC,IAAI,CAAC,IAAI/E,SAAS,IAAI,eAAe,CAACgF,IAAI,CAACV,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;QACvE,IAAI,CAACN,IAAI,CAAC,iBAAiB,EAAG,oBAAmB,EAAE;UACjDD,KAAK;UACLvG,IAAI,EAAEsH;QACR,CAAC,CAAC;QACF,OAAO,KAAK;MACd;;MAEA;MACA,MAAM,CAACG,IAAI,EAAEC,QAAQ,CAAC,GAAGtH,iBAAiB,CAACkH,CAAC,CAAC;MAC7C,IAAIG,IAAI,EAAE;QACRlB,KAAK,CAACvG,IAAI,GAAG0H,QAAQ;QACrB,IAAI,CAAClB,IAAI,CAAC,gBAAgB,EAAG,aAAYiB,IAAK,qBAAoB,EAAE;UAClElB,KAAK;UACLvG,IAAI,EAAEsH;QACR,CAAC,CAAC;MACJ;IACF;IAEA,IAAItH,IAAI,CAAC2H,UAAU,CAACpB,KAAK,CAACvG,IAAI,CAAC,EAAE;MAC/BuG,KAAK,CAACqB,QAAQ,GAAGvH,QAAQ,CAACL,IAAI,CAAC+F,OAAO,CAACQ,KAAK,CAACvG,IAAI,CAAC,CAAC;IACrD,CAAC,MAAM;MACLuG,KAAK,CAACqB,QAAQ,GAAGvH,QAAQ,CAACL,IAAI,CAAC+F,OAAO,CAAC,IAAI,CAACD,GAAG,EAAES,KAAK,CAACvG,IAAI,CAAC,CAAC;IAC/D;;IAEA;IACA;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAAC6F,aAAa,IACnBU,KAAK,CAACqB,QAAQ,CAAC7D,OAAO,CAAC,IAAI,CAAC+B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,IAC5CS,KAAK,CAACqB,QAAQ,KAAK,IAAI,CAAC9B,GAAG,EAAE;MAC/B,IAAI,CAACU,IAAI,CAAC,iBAAiB,EAAE,gCAAgC,EAAE;QAC7DD,KAAK;QACLvG,IAAI,EAAEK,QAAQ,CAACkG,KAAK,CAACvG,IAAI,CAAC;QAC1B6H,YAAY,EAAEtB,KAAK,CAACqB,QAAQ;QAC5B9B,GAAG,EAAE,IAAI,CAACA;MACZ,CAAC,CAAC;MACF,OAAO,KAAK;IACd;;IAEA;IACA;IACA,IAAIS,KAAK,CAACqB,QAAQ,KAAK,IAAI,CAAC9B,GAAG,IAC3BS,KAAK,CAACY,IAAI,KAAK,WAAW,IAC1BZ,KAAK,CAACY,IAAI,KAAK,YAAY,EAAE;MAC/B,OAAO,KAAK;IACd;;IAEA;IACA,IAAI,IAAI,CAAC1B,KAAK,EAAE;MACd,MAAM;QAAEgC,IAAI,EAAEK;MAAM,CAAC,GAAG9H,IAAI,CAACyF,KAAK,CAACsC,KAAK,CAACxB,KAAK,CAACqB,QAAQ,CAAC;MACxDrB,KAAK,CAACqB,QAAQ,GAAGE,KAAK,GAAG5H,EAAE,CAAC8H,MAAM,CAACzB,KAAK,CAACqB,QAAQ,CAACX,KAAK,CAACa,KAAK,CAACd,MAAM,CAAC,CAAC;MACtE,MAAM;QAAES,IAAI,EAAEQ;MAAM,CAAC,GAAGjI,IAAI,CAACyF,KAAK,CAACsC,KAAK,CAACxB,KAAK,CAACvG,IAAI,CAAC;MACpDuG,KAAK,CAACvG,IAAI,GAAGiI,KAAK,GAAG/H,EAAE,CAAC8H,MAAM,CAACzB,KAAK,CAACvG,IAAI,CAACiH,KAAK,CAACgB,KAAK,CAACjB,MAAM,CAAC,CAAC;IAChE;IAEA,OAAO,IAAI;EACb;EAEA,CAACxG,OAAO,EAAG+F,KAAK,EAAE;IAChB,IAAI,CAAC,IAAI,CAAClF,SAAS,CAAC,CAACkF,KAAK,CAAC,EAAE;MAC3B,OAAOA,KAAK,CAAC2B,MAAM,CAAC,CAAC;IACvB;IAEAvI,MAAM,CAACwI,KAAK,CAAC,OAAO5B,KAAK,CAACqB,QAAQ,EAAE,QAAQ,CAAC;IAE7C,QAAQrB,KAAK,CAACY,IAAI;MAChB,KAAK,WAAW;MAChB,KAAK,YAAY;QACf,IAAIZ,KAAK,CAAC6B,IAAI,EAAE;UACd7B,KAAK,CAAC6B,IAAI,GAAG7B,KAAK,CAAC6B,IAAI,GAAG,KAAK;QACjC;;MAEF;MACA,KAAK,MAAM;MACX,KAAK,SAAS;MACd,KAAK,gBAAgB;MACrB,KAAK,MAAM;MACX,KAAK,cAAc;QACjB,OAAO,IAAI,CAAC1H,OAAO,CAAC,CAAC6F,KAAK,CAAC;MAE7B,KAAK,iBAAiB;MACtB,KAAK,aAAa;MAClB,KAAK,MAAM;MACX;QACE,OAAO,IAAI,CAACnF,WAAW,CAAC,CAACmF,KAAK,CAAC;IACnC;EACF;EAEA,CAAChF,OAAO,EAAGyB,EAAE,EAAEuD,KAAK,EAAE;IACpB;IACA;IACA;IACA,IAAIvD,EAAE,CAACJ,IAAI,KAAK,UAAU,EAAE;MAC1B,IAAI,CAACiE,IAAI,CAAC,OAAO,EAAE7D,EAAE,CAAC;IACxB,CAAC,MAAM;MACL,IAAI,CAACwD,IAAI,CAAC,iBAAiB,EAAExD,EAAE,EAAE;QAAEuD;MAAM,CAAC,CAAC;MAC3C,IAAI,CAAC7E,MAAM,CAAC,CAAC,CAAC;MACd6E,KAAK,CAAC2B,MAAM,CAAC,CAAC;IAChB;EACF;EAEA,CAAC5G,KAAK,EAAG+G,GAAG,EAAED,IAAI,EAAE1F,EAAE,EAAE;IACtBzC,KAAK,CAACI,QAAQ,CAACgI,GAAG,CAAC,EAAE;MACnBvD,GAAG,EAAE,IAAI,CAACA,GAAG;MACbC,GAAG,EAAE,IAAI,CAACA,GAAG;MACbM,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3Ba,KAAK,EAAE,IAAI,CAACF,YAAY;MACxBqC,QAAQ,EAAE,IAAI,CAACzC,aAAa;MAC5BlD,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBgB,KAAK,EAAE,IAAI,CAACiB,QAAQ;MACpBkB,GAAG,EAAE,IAAI,CAACA,GAAG;MACbsC,IAAI,EAAEA,IAAI;MACVlC,OAAO,EAAE,IAAI,CAACA;IAChB,CAAC,EAAExD,EAAE,CAAC;EACR;EAEA,CAACZ,OAAO,EAAGyE,KAAK,EAAE;IAChB;IACA;IACA,OAAO,IAAI,CAACf,UAAU,IACpB,IAAI,CAACP,aAAa,KACjB,OAAOsB,KAAK,CAACzB,GAAG,KAAK,QAAQ,IAAIyB,KAAK,CAACzB,GAAG,KAAK,IAAI,CAACO,UAAU,IAC7D,OAAOkB,KAAK,CAACxB,GAAG,KAAK,QAAQ,IAAIwB,KAAK,CAACxB,GAAG,KAAK,IAAI,CAACO,UAAU,CAAC,IAEhE,OAAO,IAAI,CAACR,GAAG,KAAK,QAAQ,IAAI,IAAI,CAACA,GAAG,KAAK,IAAI,CAACO,UAAU,IAC3D,OAAO,IAAI,CAACN,GAAG,KAAK,QAAQ,IAAI,IAAI,CAACA,GAAG,KAAK,IAAI,CAACO,UAAW;EACnE;EAEA,CAACvD,GAAG,EAAGwE,KAAK,EAAE;IACZ,OAAOnD,MAAM,CAAC,IAAI,CAAC0B,GAAG,EAAEyB,KAAK,CAACzB,GAAG,EAAE,IAAI,CAACO,UAAU,CAAC;EACrD;EAEA,CAACrD,GAAG,EAAGuE,KAAK,EAAE;IACZ,OAAOnD,MAAM,CAAC,IAAI,CAAC2B,GAAG,EAAEwB,KAAK,CAACxB,GAAG,EAAE,IAAI,CAACO,UAAU,CAAC;EACrD;EAEA,CAACvE,IAAI,EAAGwF,KAAK,EAAEgC,SAAS,EAAE;IACxB,MAAMH,IAAI,GAAG7B,KAAK,CAAC6B,IAAI,GAAG,MAAM,IAAI,IAAI,CAAC/B,KAAK;IAC9C,MAAMmC,MAAM,GAAG,IAAIzI,GAAG,CAAC0I,WAAW,CAAClC,KAAK,CAACqB,QAAQ,EAAE;MACjDc,KAAK,EAAEvG,OAAO,CAACoE,KAAK,CAACoC,IAAI,CAAC;MAC1BP,IAAI,EAAEA,IAAI;MACVQ,SAAS,EAAE;IACb,CAAC,CAAC;IACFJ,MAAM,CAAClC,EAAE,CAAC,OAAO,EAAEtD,EAAE,IAAI;MACvB,IAAIwF,MAAM,CAACK,EAAE,EAAE;QACb/I,EAAE,CAACgJ,KAAK,CAACN,MAAM,CAACK,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;MAC/B;;MAEA;MACA;MACA;MACAL,MAAM,CAACO,KAAK,GAAG,MAAM,IAAI;MACzB,IAAI,CAACxH,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;MACxBgC,SAAS,CAAC,CAAC;IACb,CAAC,CAAC;IAEF,IAAIS,OAAO,GAAG,CAAC;IACf,MAAMC,IAAI,GAAGjG,EAAE,IAAI;MACjB,IAAIA,EAAE,EAAE;QACN;QACA,IAAIwF,MAAM,CAACK,EAAE,EAAE;UACb/I,EAAE,CAACgJ,KAAK,CAACN,MAAM,CAACK,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;QAC/B;QAEA,IAAI,CAACtH,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;QACxBgC,SAAS,CAAC,CAAC;QACX;MACF;MAEA,IAAI,EAAES,OAAO,KAAK,CAAC,EAAE;QACnBlJ,EAAE,CAACgJ,KAAK,CAACN,MAAM,CAACK,EAAE,EAAE7F,EAAE,IAAI;UACxB,IAAIA,EAAE,EAAE;YACN,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;UAC1B,CAAC,MAAM;YACL,IAAI,CAAC7E,MAAM,CAAC,CAAC,CAAC;UAChB;UACA6G,SAAS,CAAC,CAAC;QACb,CAAC,CAAC;MACJ;IACF,CAAC;IAEDC,MAAM,CAAClC,EAAE,CAAC,QAAQ,EAAE/B,CAAC,IAAI;MACvB;MACA;MACA;MACA,MAAMX,GAAG,GAAG2C,KAAK,CAACqB,QAAQ;MAC1B,MAAMiB,EAAE,GAAGL,MAAM,CAACK,EAAE;MAEpB,IAAItC,KAAK,CAAC2C,KAAK,IAAI,CAAC,IAAI,CAACtD,OAAO,EAAE;QAChCoD,OAAO,EAAE;QACT,MAAMG,KAAK,GAAG5C,KAAK,CAAC4C,KAAK,IAAI,IAAIC,IAAI,CAAC,CAAC;QACvC,MAAMF,KAAK,GAAG3C,KAAK,CAAC2C,KAAK;QACzBpJ,EAAE,CAACuJ,OAAO,CAACR,EAAE,EAAEM,KAAK,EAAED,KAAK,EAAElG,EAAE,IAC7BA,EAAE,GAAGlD,EAAE,CAACwJ,MAAM,CAAC1F,GAAG,EAAEuF,KAAK,EAAED,KAAK,EAAEK,GAAG,IAAIN,IAAI,CAACM,GAAG,IAAIvG,EAAE,CAAC,CAAC,GACvDiG,IAAI,CAAC,CAAC,CAAC;MACb;MAEA,IAAI,IAAI,CAACnH,OAAO,CAAC,CAACyE,KAAK,CAAC,EAAE;QACxByC,OAAO,EAAE;QACT,MAAMlE,GAAG,GAAG,IAAI,CAAC/C,GAAG,CAAC,CAACwE,KAAK,CAAC;QAC5B,MAAMxB,GAAG,GAAG,IAAI,CAAC/C,GAAG,CAAC,CAACuE,KAAK,CAAC;QAC5BzG,EAAE,CAAC0J,MAAM,CAACX,EAAE,EAAE/D,GAAG,EAAEC,GAAG,EAAE/B,EAAE,IACxBA,EAAE,GAAGlD,EAAE,CAAC2J,KAAK,CAAC7F,GAAG,EAAEkB,GAAG,EAAEC,GAAG,EAAEwE,GAAG,IAAIN,IAAI,CAACM,GAAG,IAAIvG,EAAE,CAAC,CAAC,GAClDiG,IAAI,CAAC,CAAC,CAAC;MACb;MAEAA,IAAI,CAAC,CAAC;IACR,CAAC,CAAC;IAEF,MAAMS,EAAE,GAAG,IAAI,CAACjF,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC8B,KAAK,CAAC,IAAIA,KAAK,GAAGA,KAAK;IAClE,IAAImD,EAAE,KAAKnD,KAAK,EAAE;MAChBmD,EAAE,CAACpD,EAAE,CAAC,OAAO,EAAEtD,EAAE,IAAI;QACnB,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;QACxBgC,SAAS,CAAC,CAAC;MACb,CAAC,CAAC;MACFhC,KAAK,CAACoD,IAAI,CAACD,EAAE,CAAC;IAChB;IACAA,EAAE,CAACC,IAAI,CAACnB,MAAM,CAAC;EACjB;EAEA,CAACxH,SAAS,EAAGuF,KAAK,EAAEgC,SAAS,EAAE;IAC7B,MAAMH,IAAI,GAAG7B,KAAK,CAAC6B,IAAI,GAAG,MAAM,IAAI,IAAI,CAAChC,KAAK;IAC9C,IAAI,CAAC9E,KAAK,CAAC,CAACiF,KAAK,CAACqB,QAAQ,EAAEQ,IAAI,EAAEpF,EAAE,IAAI;MACtC,IAAIA,EAAE,EAAE;QACN,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;QACxBgC,SAAS,CAAC,CAAC;QACX;MACF;MAEA,IAAIS,OAAO,GAAG,CAAC;MACf,MAAMC,IAAI,GAAG1E,CAAC,IAAI;QAChB,IAAI,EAAEyE,OAAO,KAAK,CAAC,EAAE;UACnBT,SAAS,CAAC,CAAC;UACX,IAAI,CAAC7G,MAAM,CAAC,CAAC,CAAC;UACd6E,KAAK,CAAC2B,MAAM,CAAC,CAAC;QAChB;MACF,CAAC;MAED,IAAI3B,KAAK,CAAC2C,KAAK,IAAI,CAAC,IAAI,CAACtD,OAAO,EAAE;QAChCoD,OAAO,EAAE;QACTlJ,EAAE,CAACwJ,MAAM,CAAC/C,KAAK,CAACqB,QAAQ,EAAErB,KAAK,CAAC4C,KAAK,IAAI,IAAIC,IAAI,CAAC,CAAC,EAAE7C,KAAK,CAAC2C,KAAK,EAAED,IAAI,CAAC;MACzE;MAEA,IAAI,IAAI,CAACnH,OAAO,CAAC,CAACyE,KAAK,CAAC,EAAE;QACxByC,OAAO,EAAE;QACTlJ,EAAE,CAAC2J,KAAK,CAAClD,KAAK,CAACqB,QAAQ,EAAE,IAAI,CAAC7F,GAAG,CAAC,CAACwE,KAAK,CAAC,EAAE,IAAI,CAACvE,GAAG,CAAC,CAACuE,KAAK,CAAC,EAAE0C,IAAI,CAAC;MACpE;MAEAA,IAAI,CAAC,CAAC;IACR,CAAC,CAAC;EACJ;EAEA,CAAC7H,WAAW,EAAGmF,KAAK,EAAE;IACpBA,KAAK,CAACqD,WAAW,GAAG,IAAI;IACxB,IAAI,CAACpD,IAAI,CAAC,uBAAuB,EAC9B,2BAA0BD,KAAK,CAACY,IAAK,EAAC,EAAE;MAAEZ;IAAM,CAAC,CAAC;IACrDA,KAAK,CAAC2B,MAAM,CAAC,CAAC;EAChB;EAEA,CAAChH,OAAO,EAAGqF,KAAK,EAAE0C,IAAI,EAAE;IACtB,IAAI,CAAChI,IAAI,CAAC,CAACsF,KAAK,EAAEA,KAAK,CAACc,QAAQ,EAAE,SAAS,EAAE4B,IAAI,CAAC;EACpD;EAEA,CAAC9H,QAAQ,EAAGoF,KAAK,EAAE0C,IAAI,EAAE;IACvB,MAAM5B,QAAQ,GAAGhH,QAAQ,CAACL,IAAI,CAAC+F,OAAO,CAAC,IAAI,CAACD,GAAG,EAAES,KAAK,CAACc,QAAQ,CAAC,CAAC;IACjE,IAAI,CAACpG,IAAI,CAAC,CAACsF,KAAK,EAAEc,QAAQ,EAAE,MAAM,EAAE4B,IAAI,CAAC;EAC3C;EAEA,CAACxH,IAAI,IAAK;IACR,IAAI,CAACD,OAAO,CAAC,EAAE;EACjB;EAEA,CAACE,MAAM,IAAK;IACV,IAAI,CAACF,OAAO,CAAC,EAAE;IACf,IAAI,CAACI,UAAU,CAAC,CAAC,CAAC;EACpB;EAEA,CAACC,IAAI,EAAG0E,KAAK,EAAE;IACb,IAAI,CAAC7E,MAAM,CAAC,CAAC,CAAC;IACd6E,KAAK,CAAC2B,MAAM,CAAC,CAAC;EAChB;;EAEA;EACA;EACA;EACA,CAACrH,UAAU,EAAG0F,KAAK,EAAEsD,EAAE,EAAE;IACvB,OAAOtD,KAAK,CAACY,IAAI,KAAK,MAAM,IAC1B,CAAC,IAAI,CAACxE,MAAM,IACZkH,EAAE,CAACC,MAAM,CAAC,CAAC,IACXD,EAAE,CAACE,KAAK,IAAI,CAAC,IACb,CAACvH,SAAS;EACd;;EAEA;EACA,CAAC9B,OAAO,EAAG6F,KAAK,EAAE;IAChB,IAAI,CAAC9E,IAAI,CAAC,CAAC,CAAC;IACZ,MAAMuI,KAAK,GAAG,CAACzD,KAAK,CAACvG,IAAI,CAAC;IAC1B,IAAIuG,KAAK,CAACc,QAAQ,EAAE;MAClB2C,KAAK,CAACC,IAAI,CAAC1D,KAAK,CAACc,QAAQ,CAAC;IAC5B;IACA,IAAI,CAAC7C,YAAY,CAAC0F,OAAO,CAACF,KAAK,EAAEf,IAAI,IAAI,IAAI,CAACtI,QAAQ,CAAC,CAAC4F,KAAK,EAAE0C,IAAI,CAAC,CAAC;EACvE;EAEA,CAACrI,UAAU,EAAG2F,KAAK,EAAE;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIA,KAAK,CAACY,IAAI,KAAK,cAAc,EAAE;MACjClD,SAAS,CAAC,IAAI,CAACW,QAAQ,CAAC;IAC1B,CAAC,MAAM,IAAI2B,KAAK,CAACY,IAAI,KAAK,WAAW,EAAE;MACrCzD,UAAU,CAAC,IAAI,CAACkB,QAAQ,EAAE2B,KAAK,CAACqB,QAAQ,CAAC;IAC3C;EACF;EAEA,CAACjH,QAAQ,EAAG4F,KAAK,EAAEgC,SAAS,EAAE;IAC5B,IAAI,CAAC3H,UAAU,CAAC,CAAC2F,KAAK,CAAC;IAEvB,MAAM0C,IAAI,GAAGjG,EAAE,IAAI;MACjB,IAAI,CAACpC,UAAU,CAAC,CAAC2F,KAAK,CAAC;MACvBgC,SAAS,CAACvF,EAAE,CAAC;IACf,CAAC;IAED,MAAMmH,QAAQ,GAAGA,CAAA,KAAM;MACrB,IAAI,CAAC7I,KAAK,CAAC,CAAC,IAAI,CAACwE,GAAG,EAAE,IAAI,CAACM,KAAK,EAAEpD,EAAE,IAAI;QACtC,IAAIA,EAAE,EAAE;UACN,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;UACxB0C,IAAI,CAAC,CAAC;UACN;QACF;QACA,IAAI,CAAChH,WAAW,CAAC,GAAG,IAAI;QACxBmI,KAAK,CAAC,CAAC;MACT,CAAC,CAAC;IACJ,CAAC;IAED,MAAMA,KAAK,GAAGA,CAAA,KAAM;MAClB,IAAI7D,KAAK,CAACqB,QAAQ,KAAK,IAAI,CAAC9B,GAAG,EAAE;QAC/B,MAAMuE,MAAM,GAAGhK,QAAQ,CAACL,IAAI,CAACsK,OAAO,CAAC/D,KAAK,CAACqB,QAAQ,CAAC,CAAC;QACrD,IAAIyC,MAAM,KAAK,IAAI,CAACvE,GAAG,EAAE;UACvB,OAAO,IAAI,CAACxE,KAAK,CAAC,CAAC+I,MAAM,EAAE,IAAI,CAACjE,KAAK,EAAEpD,EAAE,IAAI;YAC3C,IAAIA,EAAE,EAAE;cACN,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;cACxB0C,IAAI,CAAC,CAAC;cACN;YACF;YACAsB,eAAe,CAAC,CAAC;UACnB,CAAC,CAAC;QACJ;MACF;MACAA,eAAe,CAAC,CAAC;IACnB,CAAC;IAED,MAAMA,eAAe,GAAGA,CAAA,KAAM;MAC5BzK,EAAE,CAAC0K,KAAK,CAACjE,KAAK,CAACqB,QAAQ,EAAE,CAAC6C,OAAO,EAAEZ,EAAE,KAAK;QACxC,IAAIA,EAAE,KAAK,IAAI,CAAClE,IAAI,IAAI,IAAI,CAACD,KAAK,IAAImE,EAAE,CAACX,KAAK,GAAG3C,KAAK,CAAC2C,KAAK,CAAC,EAAE;UAC7D,IAAI,CAACrH,IAAI,CAAC,CAAC0E,KAAK,CAAC;UACjB0C,IAAI,CAAC,CAAC;UACN;QACF;QACA,IAAIwB,OAAO,IAAI,IAAI,CAAC5J,UAAU,CAAC,CAAC0F,KAAK,EAAEsD,EAAE,CAAC,EAAE;UAC1C,OAAO,IAAI,CAAC/I,MAAM,CAAC,CAAC,IAAI,EAAEyF,KAAK,EAAE0C,IAAI,CAAC;QACxC;QAEA,IAAIY,EAAE,CAACa,WAAW,CAAC,CAAC,EAAE;UACpB,IAAInE,KAAK,CAACY,IAAI,KAAK,WAAW,EAAE;YAC9B,MAAMwD,SAAS,GAAG,CAAC,IAAI,CAACzE,OAAO,IAC7BK,KAAK,CAAC6B,IAAI,IACV,CAACyB,EAAE,CAACzB,IAAI,GAAG,MAAM,MAAM7B,KAAK,CAAC6B,IAAI;YACnC,MAAMwC,UAAU,GAAG5H,EAAE,IAAI,IAAI,CAAClC,MAAM,CAAC,CAACkC,EAAE,EAAEuD,KAAK,EAAE0C,IAAI,CAAC;YACtD,IAAI,CAAC0B,SAAS,EAAE;cACd,OAAOC,UAAU,CAAC,CAAC;YACrB;YACA,OAAO9K,EAAE,CAAC+K,KAAK,CAACtE,KAAK,CAACqB,QAAQ,EAAErB,KAAK,CAAC6B,IAAI,EAAEwC,UAAU,CAAC;UACzD;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAIrE,KAAK,CAACqB,QAAQ,KAAK,IAAI,CAAC9B,GAAG,EAAE;YAC/B,OAAOhG,EAAE,CAACgL,KAAK,CAACvE,KAAK,CAACqB,QAAQ,EAAE5E,EAAE,IAChC,IAAI,CAAClC,MAAM,CAAC,CAACkC,EAAE,EAAEuD,KAAK,EAAE0C,IAAI,CAAC,CAAC;UAClC;QACF;;QAEA;QACA;QACA,IAAI1C,KAAK,CAACqB,QAAQ,KAAK,IAAI,CAAC9B,GAAG,EAAE;UAC/B,OAAO,IAAI,CAAChF,MAAM,CAAC,CAAC,IAAI,EAAEyF,KAAK,EAAE0C,IAAI,CAAC;QACxC;QAEAxG,UAAU,CAAC8D,KAAK,CAACqB,QAAQ,EAAE5E,EAAE,IAC3B,IAAI,CAAClC,MAAM,CAAC,CAACkC,EAAE,EAAEuD,KAAK,EAAE0C,IAAI,CAAC,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,IAAI,CAAChH,WAAW,CAAC,EAAE;MACrBmI,KAAK,CAAC,CAAC;IACT,CAAC,MAAM;MACLD,QAAQ,CAAC,CAAC;IACZ;EACF;EAEA,CAACrJ,MAAM,EAAGkC,EAAE,EAAEuD,KAAK,EAAE0C,IAAI,EAAE;IACzB,IAAIjG,EAAE,EAAE;MACN,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;MACxB0C,IAAI,CAAC,CAAC;MACN;IACF;IAEA,QAAQ1C,KAAK,CAACY,IAAI;MAChB,KAAK,MAAM;MACX,KAAK,SAAS;MACd,KAAK,gBAAgB;QACnB,OAAO,IAAI,CAACpG,IAAI,CAAC,CAACwF,KAAK,EAAE0C,IAAI,CAAC;MAEhC,KAAK,MAAM;QACT,OAAO,IAAI,CAAC9H,QAAQ,CAAC,CAACoF,KAAK,EAAE0C,IAAI,CAAC;MAEpC,KAAK,cAAc;QACjB,OAAO,IAAI,CAAC/H,OAAO,CAAC,CAACqF,KAAK,EAAE0C,IAAI,CAAC;MAEnC,KAAK,WAAW;MAChB,KAAK,YAAY;QACf,OAAO,IAAI,CAACjI,SAAS,CAAC,CAACuF,KAAK,EAAE0C,IAAI,CAAC;IACvC;EACF;EAEA,CAAChI,IAAI,EAAGsF,KAAK,EAAEc,QAAQ,EAAE0D,IAAI,EAAE9B,IAAI,EAAE;IACnC;IACAnJ,EAAE,CAACiL,IAAI,CAAC,CAAC1D,QAAQ,EAAEd,KAAK,CAACqB,QAAQ,EAAE5E,EAAE,IAAI;MACvC,IAAIA,EAAE,EAAE;QACN,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;MAC1B,CAAC,MAAM;QACL,IAAI,CAAC7E,MAAM,CAAC,CAAC,CAAC;QACd6E,KAAK,CAAC2B,MAAM,CAAC,CAAC;MAChB;MACAe,IAAI,CAAC,CAAC;IACR,CAAC,CAAC;EACJ;AACF;AAEA,MAAM+B,QAAQ,GAAGC,EAAE,IAAI;EACrB,IAAI;IACF,OAAO,CAAC,IAAI,EAAEA,EAAE,CAAC,CAAC,CAAC;EACrB,CAAC,CAAC,OAAOjI,EAAE,EAAE;IACX,OAAO,CAACA,EAAE,EAAE,IAAI,CAAC;EACnB;AACF,CAAC;AACD,MAAMkI,UAAU,SAAS/G,MAAM,CAAC;EAC9B,CAACrD,MAAM,EAAGkC,EAAE,EAAEuD,KAAK,EAAE;IACnB,OAAO,KAAK,CAACzF,MAAM,CAAC,CAACkC,EAAE,EAAEuD,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;EAC3C;EAEA,CAAC7F,OAAO,EAAG6F,KAAK,EAAE;IAChB,IAAI,CAAC3F,UAAU,CAAC,CAAC2F,KAAK,CAAC;IAEvB,IAAI,CAAC,IAAI,CAACtE,WAAW,CAAC,EAAE;MACtB,MAAMe,EAAE,GAAG,IAAI,CAAC1B,KAAK,CAAC,CAAC,IAAI,CAACwE,GAAG,EAAE,IAAI,CAACM,KAAK,CAAC;MAC5C,IAAIpD,EAAE,EAAE;QACN,OAAO,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;MACjC;MACA,IAAI,CAACtE,WAAW,CAAC,GAAG,IAAI;IAC1B;;IAEA;IACA;IACA,IAAIsE,KAAK,CAACqB,QAAQ,KAAK,IAAI,CAAC9B,GAAG,EAAE;MAC/B,MAAMuE,MAAM,GAAGhK,QAAQ,CAACL,IAAI,CAACsK,OAAO,CAAC/D,KAAK,CAACqB,QAAQ,CAAC,CAAC;MACrD,IAAIyC,MAAM,KAAK,IAAI,CAACvE,GAAG,EAAE;QACvB,MAAMqF,QAAQ,GAAG,IAAI,CAAC7J,KAAK,CAAC,CAAC+I,MAAM,EAAE,IAAI,CAACjE,KAAK,CAAC;QAChD,IAAI+E,QAAQ,EAAE;UACZ,OAAO,IAAI,CAAC5J,OAAO,CAAC,CAAC4J,QAAQ,EAAE5E,KAAK,CAAC;QACvC;MACF;IACF;IAEA,MAAM,CAACkE,OAAO,EAAEZ,EAAE,CAAC,GAAGmB,QAAQ,CAAC,MAAMlL,EAAE,CAACsL,SAAS,CAAC7E,KAAK,CAACqB,QAAQ,CAAC,CAAC;IAClE,IAAIiC,EAAE,KAAK,IAAI,CAAClE,IAAI,IAAI,IAAI,CAACD,KAAK,IAAImE,EAAE,CAACX,KAAK,GAAG3C,KAAK,CAAC2C,KAAK,CAAC,EAAE;MAC7D,OAAO,IAAI,CAACrH,IAAI,CAAC,CAAC0E,KAAK,CAAC;IAC1B;IAEA,IAAIkE,OAAO,IAAI,IAAI,CAAC5J,UAAU,CAAC,CAAC0F,KAAK,EAAEsD,EAAE,CAAC,EAAE;MAC1C,OAAO,IAAI,CAAC/I,MAAM,CAAC,CAAC,IAAI,EAAEyF,KAAK,CAAC;IAClC;IAEA,IAAIsD,EAAE,CAACa,WAAW,CAAC,CAAC,EAAE;MACpB,IAAInE,KAAK,CAACY,IAAI,KAAK,WAAW,EAAE;QAC9B,MAAMwD,SAAS,GAAG,CAAC,IAAI,CAACzE,OAAO,IAC7BK,KAAK,CAAC6B,IAAI,IACV,CAACyB,EAAE,CAACzB,IAAI,GAAG,MAAM,MAAM7B,KAAK,CAAC6B,IAAI;QACnC,MAAM,CAACpF,EAAE,CAAC,GAAG2H,SAAS,GAAGK,QAAQ,CAAC,MAAM;UACtClL,EAAE,CAACuL,SAAS,CAAC9E,KAAK,CAACqB,QAAQ,EAAErB,KAAK,CAAC6B,IAAI,CAAC;QAC1C,CAAC,CAAC,GAAG,EAAE;QACP,OAAO,IAAI,CAACtH,MAAM,CAAC,CAACkC,EAAE,EAAEuD,KAAK,CAAC;MAChC;MACA;MACA,MAAM,CAACvD,EAAE,CAAC,GAAGgI,QAAQ,CAAC,MAAMlL,EAAE,CAACwL,SAAS,CAAC/E,KAAK,CAACqB,QAAQ,CAAC,CAAC;MACzD,IAAI,CAAC9G,MAAM,CAAC,CAACkC,EAAE,EAAEuD,KAAK,CAAC;IACzB;;IAEA;IACA;IACA,MAAM,CAACvD,EAAE,CAAC,GAAGuD,KAAK,CAACqB,QAAQ,KAAK,IAAI,CAAC9B,GAAG,GAAG,EAAE,GACzCkF,QAAQ,CAAC,MAAM/H,cAAc,CAACsD,KAAK,CAACqB,QAAQ,CAAC,CAAC;IAClD,IAAI,CAAC9G,MAAM,CAAC,CAACkC,EAAE,EAAEuD,KAAK,CAAC;EACzB;EAEA,CAACxF,IAAI,EAAGwF,KAAK,EAAE0C,IAAI,EAAE;IACnB,MAAMb,IAAI,GAAG7B,KAAK,CAAC6B,IAAI,GAAG,MAAM,IAAI,IAAI,CAAC/B,KAAK;IAE9C,MAAMkF,IAAI,GAAGvI,EAAE,IAAI;MACjB,IAAIwI,UAAU;MACd,IAAI;QACF1L,EAAE,CAAC2L,SAAS,CAAC5C,EAAE,CAAC;MAClB,CAAC,CAAC,OAAO6C,CAAC,EAAE;QACVF,UAAU,GAAGE,CAAC;MAChB;MACA,IAAI1I,EAAE,IAAIwI,UAAU,EAAE;QACpB,IAAI,CAACjK,OAAO,CAAC,CAACyB,EAAE,IAAIwI,UAAU,EAAEjF,KAAK,CAAC;MACxC;MACA0C,IAAI,CAAC,CAAC;IACR,CAAC;IAED,IAAIJ,EAAE;IACN,IAAI;MACFA,EAAE,GAAG/I,EAAE,CAAC6L,QAAQ,CAACpF,KAAK,CAACqB,QAAQ,EAAEzF,OAAO,CAACoE,KAAK,CAACoC,IAAI,CAAC,EAAEP,IAAI,CAAC;IAC7D,CAAC,CAAC,OAAOpF,EAAE,EAAE;MACX,OAAOuI,IAAI,CAACvI,EAAE,CAAC;IACjB;IACA,MAAM0G,EAAE,GAAG,IAAI,CAACjF,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC8B,KAAK,CAAC,IAAIA,KAAK,GAAGA,KAAK;IAClE,IAAImD,EAAE,KAAKnD,KAAK,EAAE;MAChBmD,EAAE,CAACpD,EAAE,CAAC,OAAO,EAAEtD,EAAE,IAAI,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC,CAAC;MAC9CA,KAAK,CAACoD,IAAI,CAACD,EAAE,CAAC;IAChB;IAEAA,EAAE,CAACpD,EAAE,CAAC,MAAM,EAAEsF,KAAK,IAAI;MACrB,IAAI;QACF9L,EAAE,CAAC+L,SAAS,CAAChD,EAAE,EAAE+C,KAAK,EAAE,CAAC,EAAEA,KAAK,CAAC5E,MAAM,CAAC;MAC1C,CAAC,CAAC,OAAOhE,EAAE,EAAE;QACXuI,IAAI,CAACvI,EAAE,CAAC;MACV;IACF,CAAC,CAAC;IAEF0G,EAAE,CAACpD,EAAE,CAAC,KAAK,EAAE/B,CAAC,IAAI;MAChB,IAAIvB,EAAE,GAAG,IAAI;MACb;MACA;MACA,IAAIuD,KAAK,CAAC2C,KAAK,IAAI,CAAC,IAAI,CAACtD,OAAO,EAAE;QAChC,MAAMuD,KAAK,GAAG5C,KAAK,CAAC4C,KAAK,IAAI,IAAIC,IAAI,CAAC,CAAC;QACvC,MAAMF,KAAK,GAAG3C,KAAK,CAAC2C,KAAK;QACzB,IAAI;UACFpJ,EAAE,CAACgM,WAAW,CAACjD,EAAE,EAAEM,KAAK,EAAED,KAAK,CAAC;QAClC,CAAC,CAAC,OAAO6C,SAAS,EAAE;UAClB,IAAI;YACFjM,EAAE,CAACkM,UAAU,CAACzF,KAAK,CAACqB,QAAQ,EAAEuB,KAAK,EAAED,KAAK,CAAC;UAC7C,CAAC,CAAC,OAAO+C,QAAQ,EAAE;YACjBjJ,EAAE,GAAG+I,SAAS;UAChB;QACF;MACF;MAEA,IAAI,IAAI,CAACjK,OAAO,CAAC,CAACyE,KAAK,CAAC,EAAE;QACxB,MAAMzB,GAAG,GAAG,IAAI,CAAC/C,GAAG,CAAC,CAACwE,KAAK,CAAC;QAC5B,MAAMxB,GAAG,GAAG,IAAI,CAAC/C,GAAG,CAAC,CAACuE,KAAK,CAAC;QAE5B,IAAI;UACFzG,EAAE,CAACoM,UAAU,CAACrD,EAAE,EAAE/D,GAAG,EAAEC,GAAG,CAAC;QAC7B,CAAC,CAAC,OAAOoH,QAAQ,EAAE;UACjB,IAAI;YACFrM,EAAE,CAACsM,SAAS,CAAC7F,KAAK,CAACqB,QAAQ,EAAE9C,GAAG,EAAEC,GAAG,CAAC;UACxC,CAAC,CAAC,OAAOsH,OAAO,EAAE;YAChBrJ,EAAE,GAAGA,EAAE,IAAImJ,QAAQ;UACrB;QACF;MACF;MAEAZ,IAAI,CAACvI,EAAE,CAAC;IACV,CAAC,CAAC;EACJ;EAEA,CAAChC,SAAS,EAAGuF,KAAK,EAAE0C,IAAI,EAAE;IACxB,MAAMb,IAAI,GAAG7B,KAAK,CAAC6B,IAAI,GAAG,MAAM,IAAI,IAAI,CAAChC,KAAK;IAC9C,MAAMpD,EAAE,GAAG,IAAI,CAAC1B,KAAK,CAAC,CAACiF,KAAK,CAACqB,QAAQ,EAAEQ,IAAI,CAAC;IAC5C,IAAIpF,EAAE,EAAE;MACN,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;MACxB0C,IAAI,CAAC,CAAC;MACN;IACF;IACA,IAAI1C,KAAK,CAAC2C,KAAK,IAAI,CAAC,IAAI,CAACtD,OAAO,EAAE;MAChC,IAAI;QACF9F,EAAE,CAACkM,UAAU,CAACzF,KAAK,CAACqB,QAAQ,EAAErB,KAAK,CAAC4C,KAAK,IAAI,IAAIC,IAAI,CAAC,CAAC,EAAE7C,KAAK,CAAC2C,KAAK,CAAC;MACvE,CAAC,CAAC,OAAOlG,EAAE,EAAE,CAAC;IAChB;IACA,IAAI,IAAI,CAAClB,OAAO,CAAC,CAACyE,KAAK,CAAC,EAAE;MACxB,IAAI;QACFzG,EAAE,CAACsM,SAAS,CAAC7F,KAAK,CAACqB,QAAQ,EAAE,IAAI,CAAC7F,GAAG,CAAC,CAACwE,KAAK,CAAC,EAAE,IAAI,CAACvE,GAAG,CAAC,CAACuE,KAAK,CAAC,CAAC;MAClE,CAAC,CAAC,OAAOvD,EAAE,EAAE,CAAC;IAChB;IACAiG,IAAI,CAAC,CAAC;IACN1C,KAAK,CAAC2B,MAAM,CAAC,CAAC;EAChB;EAEA,CAAC5G,KAAK,EAAG+G,GAAG,EAAED,IAAI,EAAE;IAClB,IAAI;MACF,OAAOnI,KAAK,CAACqM,IAAI,CAACjM,QAAQ,CAACgI,GAAG,CAAC,EAAE;QAC/BvD,GAAG,EAAE,IAAI,CAACA,GAAG;QACbC,GAAG,EAAE,IAAI,CAACA,GAAG;QACbM,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BC,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3Ba,KAAK,EAAE,IAAI,CAACF,YAAY;QACxBqC,QAAQ,EAAE,IAAI,CAACzC,aAAa;QAC5BlD,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBgB,KAAK,EAAE,IAAI,CAACiB,QAAQ;QACpBkB,GAAG,EAAE,IAAI,CAACA,GAAG;QACbsC,IAAI,EAAEA;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOpF,EAAE,EAAE;MACX,OAAOA,EAAE;IACX;EACF;EAEA,CAAC/B,IAAI,EAAGsF,KAAK,EAAEc,QAAQ,EAAE0D,IAAI,EAAE9B,IAAI,EAAE;IACnC,IAAI;MACFnJ,EAAE,CAACiL,IAAI,GAAG,MAAM,CAAC,CAAC1D,QAAQ,EAAEd,KAAK,CAACqB,QAAQ,CAAC;MAC3CqB,IAAI,CAAC,CAAC;MACN1C,KAAK,CAAC2B,MAAM,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOlF,EAAE,EAAE;MACX,OAAO,IAAI,CAACzB,OAAO,CAAC,CAACyB,EAAE,EAAEuD,KAAK,CAAC;IACjC;EACF;AACF;AAEApC,MAAM,CAACoI,IAAI,GAAGrB,UAAU;AACxBsB,MAAM,CAACC,OAAO,GAAGtI,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}